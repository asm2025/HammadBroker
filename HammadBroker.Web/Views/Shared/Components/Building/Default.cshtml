@using Microsoft.AspNetCore.Antiforgery
@using HammadBroker.Model
@using HammadBroker.Model.DTO
@using HammadBroker.Model.VirtualPath
@using System.Configuration
@using essentialMix.Helpers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Configuration
@inject IAntiforgery Antiforgery
@inject IAuthorizationService AuthorizationService
@inject VirtualPathSettings VirtualPathSettings
@inject IConfiguration Configuration
@model BuildingModel

@{
	bool isAdmin = (await AuthorizationService.AuthorizeAsync(User, Constants.Authorization.AdministrationPolicy)).Succeeded;

	if (!isAdmin)
	{
		Model.CanEdit = false;
		Model.CanUpload = false;
		Model.ReadOnly = true;
	}

	string action = Model.CanEdit
						? Url.Action(string.IsNullOrEmpty(Model.Id)
										? "Add"
										: "Edit", "Buildings", new
										{
											area = "Admin",
											id = Model.Id
										})
						: null;
	string newId = Model.CanEdit && string.IsNullOrEmpty(Model.Id) ? StringHelper.RandomKey(Constants.Buildings.IdentifierLength) : Model.Id;
	PathContent assetsPath = VirtualPathSettings.PathContents?.FirstOrDefault(e => e.Alias.IsSame("AssetImages")) ?? throw new ConfigurationErrorsException($"{nameof(VirtualPathSettings)} does not contain a definition for AssetImages.");
	string placeholderImage = Configuration.GetValue("Images:AssetPlaceholder", string.Empty);
	if (string.IsNullOrEmpty(placeholderImage)) throw new ConfigurationErrorsException("Images:AssetPlaceholder is missing.");
	placeholderImage = assetsPath.RequestPath.Trim('/') + placeholderImage;
}

<div id="buildingForm" v-scope class="card card-body mt-3">
	@if (Model.CanEdit)
	{
		@:<form action="@action" Method="post" enctype="multipart/form-data">
		<div asp-validation-summary="ModelOnly"></div>
		@Html.AntiForgeryToken()
	}
	<div v-if="errors && errors.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="error of errors">
		{{ error }}
		<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
	</div>

	<galleria ref="galleria" :container-class="'galleria'" :value="images" :show-thumbnails="false" circular full-screen
			show-item-navigators show-item-navigators-on-hover change-item-on-indicator-hover v-model:visible="fullScreen">
		<template #item="{ item }">
			<img :src="item.imageUrl" alt="" class="img-fluid" v-on:click="fullScreen = false" />
		</template>
	</galleria>

	<div class="card-deck2 align-items-stretch mb-2">
		<div class="card card-body">
			@if (string.IsNullOrEmpty(Model.Building.VideoId))
			{
				<img class="img-fluid" :src="`@Context.Request.Scheme://@Context.Request.Host${(images && images.length && images[0].imageUrl ? images[0].imageUrl : '@placeholderImage')}`" alt=""
					v-on:error="`this.onerror=null;this.src='@Context.Request.Scheme://@Context.Request.Host@placeholderImage'`"/>
				<div class="position-absolute bottom-0 mb-3 mx-3 d-flex align-items-center z-3">
					@if (Model.CanUpload)
					{
						<button v-if="!fullScreen" type="button" title="إضافة صور" class="btn btn-light me-1" v-on:click="uploading = !uploading">
							<i class="fa fa-plus"></i>
						</button>
					}
					<button v-if="images && images.length" type="button" :title="`تصفح ال ${images.length} صور`" class="btn btn-light me-1" v-on:click="toggleFullScreen">
						<i class="fa fa-camera"></i>
					</button>
				</div>
			}
			else
			{
				<vid-asset VideoId="@Model.Building.VideoId" Class="ratio ratio-16x9"/>
			}
		</div>
		<div v-if="@Model.CanUpload.ToString().ToLowerInvariant() || images && images.length" class="card card-body">
			<div :class="'drop-zone'">
				<div v-if="images && images.length > 1" :class="['zone-item d-flex flex-column', { active: !uploading }]">
					<div class="tile">
						<img class="img-fluid" :src="`@Context.Request.Scheme://@Context.Request.Host${images[1].imageUrl}`" alt=""
							v-on:error="`this.onerror=null;this.src='@Context.Request.Scheme://@Context.Request.Host@placeholderImage'`"/>
					</div>
					<div v-if="images.length > 2" class="tile">
						<img class="img-fluid" :src="`@Context.Request.Scheme://@Context.Request.Host${images[2].imageUrl}`" alt=""
							v-on:error="`this.onerror=null;this.src='@Context.Request.Scheme://@Context.Request.Host@placeholderImage'`"/>
					</div>
				</div>
				@if (Model.CanUpload)
				{
					<div :class="['zone-item', { active: uploading }]">
						<fileupload accept="@Constants.Images.Extensions" multiple :file-limit="@Constants.Images.MaxImagesUpload" :max-file-size="@Constants.Images.FileSizeMax"
									:custom-upload="true" v-on:select="onFilesSelected" v-on:uploader="onUpload" v-on:upload="onFilesUploaded" v-on:error="onError">
							<template #header="{ chooseCallback, uploadCallback, clearCallback, files }">
								<div class="w-100 d-flex flex-wrap align-items-center gap-2">
									<div class="d-flex flex-grow-1 gap-2">
										<button type="button" class="btn btn-outline-secondary btn-sm" title="اختيار ملفات" v-on:click="chooseCallback()"><i class="fa fa-images"></i></button>
										<button v-if="files && files.length" type="button" class="btn btn-outline-secondary btn-sm" title="تحميل" v-on:click="uploadCallback()"><i class="fa fa-cloud-upload"></i></button>
										<button v-if="files && files.length" type="button" class="btn btn-outline-secondary btn-sm" title="حذف" v-on:click="clearCallback()"><i class="fa fa-times"></i></button>
									</div>
									<ProgressBar v-show="uploadProgress > 0" :value="uploadProgress" :show-value="false" :class="['md:w-10rem h-1rem w-full md:mr-auto', {'exceeded-progress-bar': (uploadProgress > 100)}]">
									</ProgressBar>
								</div>
							</template>
							<template #empty>
								<div class="d-flex align-items-center justify-content-center flex-column">
									<i class="fa fa-cloud-upload border-2 border-circle p-5 lead text-200 border-200"></i>
									<div class="position-absolute">اسحب الملفات الى هنا للتحميل.</div>
								</div>
							</template>
							<template #content="{ files, uploadedFiles, messages, onUploadedFileRemove, onFileRemove }">
								<div v-if="messages && messages.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="message of messages">
									{{ message }}
									<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
								</div>
								<div v-if="files && files.length > 0">
									<h5>التحميل</h5>
									<div v-for="(file, index) of files" :key="file.name + file.type + file.size" class="card m-0">
										<span class="position-absolute top-0 start-0 border border-light p-1 m-1 badge rounded-pill text-bg-warning"><span class="visually-hidden">في انتظار التحميل</span></span>
										<img class="card-img-top" role="presentation" :alt="file.name" :src="file.objectURL"/>
										<div class="card-body">
											<div class="card-title text-truncate">{{ file.name }}</div>
											<div class="d-flex align-items-center">
												<div class="card-text flex-grow-1">{{ formatSize(file.size) }}</div>
												<button type="button" class="btn btn-outline-danger btn-sm" v-on:click="onRemoveFile(file, onFileRemove, index)"><i class="fa fa-times"></i></button>
											</div>
										</div>
									</div>
								</div>
								<div v-if="uploadedFiles && uploadedFiles.length > 0">
									<h5>إكتمل</h5>
									<div v-for="(file, index) of uploadedFiles" :key="file.name + file.type + file.size" class="card m-0">
										<span class="position-absolute top-0 start-0 border border-light p-1 m-1 badge rounded-pill text-bg-success"><span class="visually-hidden">في انتظار التحميل</span></span>
										<img class="card-img-top" role="presentation" :alt="file.name" :src="file.objectURL"/>
										<div class="card-body">
											<div class="card-title text-truncate">{{ file.name }}</div>
											<div class="d-flex align-items-center">
												<div class="card-text flex-grow-1">{{ formatSize(file.size) }}</div>
												<button type="button" class="btn btn-outline-danger btn-sm" v-on:click="onUploadedFileRemove(index)"><i class="fa fa-times"></i></button>
											</div>
										</div>
									</div>
								</div>
							</template>
						</fileupload>
					</div>
				}
				<div v-if="images && images.length" ref="zoneFooter" class="zone-footer mb-2" dir="ltr">
					<button type="button" v-if="!uploading" class="btn btn-light btn-sm border-0 me-1" v-on:click="fullScreen = true">
						<i :class="['fa', fullScreen ? 'fa-minimize' : 'fa-maximize']"></i>
					</button>
					@if (Model.CanUpload)
					{
						<button type="button" v-if="!fullScreen" class="btn btn-light btn-sm border-0 me-1" v-on:click="uploading = !uploading">
							<i :class="['fa', uploading ? 'fa-image' : 'fa-cloud-arrow-up']"></i>
						</button>
					}
				</div>
			</div>
		</div>
	</div>

	@if (Model.CanEdit)
	{
		<div class="row g-0 px-2">
			<div class="col-sm-12 col-md-6">
				<label asp-for="Building.Id" class="form-label"></label>

				@if (string.IsNullOrEmpty(newId))
				{
					<input class="form-control" asp-for="Building.Id" />
				}
				else
				{
					<input class="form-control" asp-for="Building.Id" value="@newId" />
				}

				<span asp-validation-for="Building.Id" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-6">
				<label asp-for="Building.VideoId" class="form-label"></label>
				<input class="form-control" asp-for="Building.VideoId" />
				<span asp-validation-for="Building.VideoId" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0 px-2">
			<div class="col-sm-12 col-md-3">
				<label asp-for="Building.BuildingType" class="form-label"></label>
				<select asp-for="Building.BuildingType" class="form-select" asp-items="Html.GetEnumSelectList<BuildingType>()">
					<option value="">@Html.DisplayNameFor(e => e.Building.BuildingType)</option>
				</select>
				<span asp-validation-for="Building.BuildingType" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-3">
				<label asp-for="Building.FinishingType" class="form-label"></label>
				<select asp-for="Building.FinishingType" class="form-select" asp-items="Html.GetEnumSelectList<FinishingType>()">
					<option value="">@Html.DisplayNameFor(e => e.Building.FinishingType)</option>
				</select>
				<span asp-validation-for="Building.FinishingType" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-3">
				<label asp-for="Building.AdType" class="form-label"></label>
				<select asp-for="Building.AdType" class="form-select" asp-items="Html.GetEnumSelectList<BuildingAdType>()">
					<option value="">@Html.DisplayNameFor(e => e.Building.AdType)</option>
				</select>
				<span asp-validation-for="Building.AdType" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-3">
				<label asp-for="Building.Priority" class="form-label"></label>
				<input class="form-control" asp-for="Building.Priority" />
				<span asp-validation-for="Building.Priority" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0 px-2">
			<div class="col-sm-12 col-md-3">
				<label asp-for="Building.Rooms" class="form-label"></label>
				<input class="form-control" asp-for="Building.Rooms" />
				<span asp-validation-for="Building.Rooms" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-3">
				<label asp-for="Building.Bathrooms" class="form-label"></label>
				<input class="form-control" asp-for="Building.Bathrooms" />
				<span asp-validation-for="Building.Bathrooms" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-3">
				<label asp-for="Building.Area" class="form-label"></label>
				<input class="form-control" asp-for="Building.Area" />
				<span asp-validation-for="Building.Area" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-3">
				<label asp-for="Building.Floor" class="form-label"></label>
				<input class="form-control" asp-for="Building.Floor" />
				<span asp-validation-for="Building.Floor" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0 px-2">
			<div class="col-12">
				<label asp-for="Building.Address" class="form-label"></label>
				<input class="form-control" asp-for="Building.Address" />
				<span asp-validation-for="Building.Address" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0 px-2">
			<div class="col-sm-12 col-md-6">
				<label asp-for="Building.Address2" class="form-label"></label>
				<input class="form-control" asp-for="Building.Address2" />
				<span asp-validation-for="Building.Address2" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-6">
				<label asp-for="Building.CityId" class="form-label"></label>
				<input type="hidden" asp-for="Building.CityId" :value="cityId" />
				<autocomplete class="w-100" input-class="w-100" :suggestions="cities" option-label="name"
							:min-length="0" v-model="selectedCity" data-key="id" dropdown 
							v-on:complete="fetchCities($event.query)">
				</autocomplete>
				<span asp-validation-for="Building.CityId" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0 px-2">
			<div class="col-12">
				<label asp-for="Building.ShortDescription" class="form-label"></label>
				<input class="form-control" asp-for="Building.ShortDescription" />
				<span asp-validation-for="Building.ShortDescription" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0 px-2">
			<div class="col-12">
				<label asp-for="Building.Description" class="form-label"></label>
				<textarea class="form-control" asp-for="Building.Description" rows="5">
				</textarea>
				<span asp-validation-for="Building.Description" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0 px-2">
			<div class="col-sm-12 col-md-6">
				<label asp-for="Building.Date" class="form-label"></label>
				<input type="hidden" name="@($"{nameof(Model.Building)}.{nameof(Model.Building.Date)}")" :value="date"/>
				<calendar class="w-100" v-model="date" selection-mode="single" date-format="yy/mm/dd">
				</calendar>
				<span asp-validation-for="Building.Date" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-6">
				<label asp-for="Building.Expires" class="form-label"></label>
				<input type="hidden" name="@($"{nameof(Model.Building)}.{nameof(Model.Building.Expires)}")" :value="expires"/>
				<calendar class="w-100" v-model="expires" selection-mode="single" date-format="yy/mm/dd">
				</calendar>
				<span asp-validation-for="Building.Expires" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0 px-2">
			<div class="col-sm-12 col-md-4">
				<label asp-for="Building.Phone" class="form-label"></label>
				<input class="form-control" asp-for="Building.Phone" dir="ltr" />
				<span asp-validation-for="Building.Phone" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-4">
				<label asp-for="Building.Mobile" class="form-label"></label>
				<input class="form-control" asp-for="Building.Mobile" dir="ltr" />
				<span asp-validation-for="Building.Mobile" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-4">
				<label asp-for="Building.Price" class="form-label"></label>
				<input class="form-control" asp-for="Building.Price" />
				<span asp-validation-for="Building.Price" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0 px-2 my-1">
			<button type="submit" class="btn btn-primary border-0 me-1">حفظ</button>
			@if (string.IsNullOrEmpty(Model.Id))
			{
				<a class="btn btn-outline-primary border-0 me-1" asp-area="Admin" asp-controller="Buildings" asp-action="Get" asp-route-id="@Model.Id">الغاء</a>
			}
			else
			{
				<a class="btn btn-outline-primary border-0 me-1" asp-area="Admin" asp-controller="Buildings" asp-action="Index">الغاء</a>
			}
		</div>
		@:</form>
	}
	else
	{
		<div class="row g-0 px-2">
			<div class="col-12">
				<small class="text-muted">#@Model.Building.Id</small>
				<h5 class="mt-3">@Model.Building.BuildingTypeName @Model.Building.AdTypeName @Model.Building.FinishingTypeName</h5>
			</div>
		</div>
		<div class="row g-0 px-2">
			<div class="col-12">
				<i class="fa fa-location-dot"></i>
				@Html.DisplayFor(e => e.Building.Address)
				&nbsp;
				@Html.DisplayFor(e => e.Building.Address2)
				&nbsp;
				@if (Model.Building is ICityNameLookup cityNameLookup && !string.IsNullOrEmpty(cityNameLookup.CityName))
				{
					@Html.DisplayFor(e => cityNameLookup.CityName)
				}
			</div>
		</div>
		<div class="row g-0 px-2">
			@if (Model.Building.Floor > 0)
			{
				<div class="col mt-2">
					<i class="fa fa-building"></i>&nbsp;
					<label asp-for="Building.Floor" class="form-label"></label>&nbsp;
					@Html.DisplayFor(e => e.Building.Floor)
				</div>
			}
			@if (Model.Building.Rooms > 0)
			{
				<div class="col mt-2">
					<i class="fa fa-person-shelter"></i>&nbsp;
					<label asp-for="Building.Rooms" class="form-label"></label>&nbsp;
					@Html.DisplayFor(e => e.Building.Rooms)
				</div>
			}
			@if (Model.Building.Bathrooms > 0)
			{
				<div class="col mt-2">
					<i class="fa fa-restroom"></i>&nbsp;
					<label asp-for="Building.Bathrooms" class="form-label"></label>&nbsp;
					@Html.DisplayFor(e => e.Building.Bathrooms)
				</div>
			}
			@if (Model.Building.Area > 0)
			{
				<div class="col mt-2">
					<i class="fa fa-square"></i>&nbsp;
					<label asp-for="Building.Area" class="form-label"></label>&nbsp;
					@Html.DisplayFor(e => e.Building.Area) م
				</div>
			}
		</div>
		@if (!string.IsNullOrEmpty(Model.Building.ShortDescription))
		{
			<div class="row g-0 px-2">
				<div class="col-12 mt-2">
					@Html.DisplayFor(e => Model.Building.ShortDescription)
				</div>
			</div>
		}
		@if (!string.IsNullOrEmpty(Model.Building.Description))
		{
			<div class="row g-0 px-2 mt-2">
				<div class="col-12 linebreaks">
					<pre>@Model.Building.Description</pre>
				</div>
			</div>
		}
		<div class="row g-0 px-2">
			@if (!string.IsNullOrEmpty(Model.Building.Phone))
			{
				<div class="col mt-3 fw-bold">
					<label asp-for="Building.Phone" class="form-label"></label>&nbsp;
					<span dir="ltr">@Html.DisplayFor(e => e.Building.Phone)</span>
				</div>
			}
			@if (!string.IsNullOrEmpty(Model.Building.Mobile))
			{
				<div class="col mt-3 fw-bold">
					<label asp-for="Building.Mobile" class="form-label"></label>&nbsp;
					<span dir="ltr">@Html.DisplayFor(e => e.Building.Mobile)</span>
				</div>
			}
			<div class="col mt-3 fw-bold">
				<label asp-for="Building.Price" class="form-label"></label>&nbsp;
				@Html.DisplayFor(e => e.Building.Price) جنيه
			</div>
		</div>
		@if (!Model.ReadOnly)
		{
			<div class="row g-0 px-2 mt-3">
				<a asp-area="Admin" asp-controller="Buildings" asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary border-0 me-1">تعديل</a>
			</div>
		}
	}
</div>

<script type="text/javascript" defer>
	const { createApp, nextTick, ref } = Vue;
	const { useToast } = primevue.usetoast;

	const DELAY = 300;
	const _FILE_SIZES = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
	const _formatSize = (bytes) => {
		if (!bytes) return '0 B';

		const k = 1000;
		const dm = 3;
		const i = Math.floor(Math.log(bytes) / Math.log(k));

		return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + _FILE_SIZES[i];
	};
	const _fetchCities = _.debounce(async (self, search) => {
		self.loading = true;
		search = search && search.trim();

		try {
			const params = new URLSearchParams({
				search: search ? encodeURIComponent(search) : ""
			});
			const url = `@Url.Action("List", "Cities", new
			             {
				             area = "Admin"
			             })?${params}`;
			const response = await window.fetch(url);

			if (!response.ok) {
				const error = await getResponseError(response);
				throw error;
			}

			self.cities = await response.json();
			if (self.cityId) self.selectedCity = self.cities.find(e => e.id === self.cityId);
		} catch (e) {
			self.selectedCity = null;
			self.cities = [];
			alert(e.message || e);
		} finally {
			self.loading = false;
		}
		}, DELAY, { leading: true });
	const _fetchImages = _.debounce(async (self) => {
		self.errors.length = 0;
		
		const id = "@Model.Id";

		if (!id) {
			self.images = [];
			self.uploading = true;
			return;
		}

		self.loading = true;

		try {
			const params = new URLSearchParams({
				id
			});
			const url = `@Url.Action("ListImages", "Buildings", new
			             {
				             area = "Admin"
			             })?${params}`;
			const response = await window.fetch(url);

			if (!response.ok) {
				const error = await getResponseError(response);
				throw error;
			}

			self.images = await response.json();
		} catch (e) {
			self.images = [];
			alert(e.message || e);
		} finally {
			self.loading = false;
		}

		self.uploading = Boolean(!self.images || !self.images.length);
	}, DELAY, { trailing: true });

	createApp({
			data() {
				return {
					loading: false,
					date: '@Model.Building.Date.ToString("yyyy/MM/dd")',
					expires: '@Model.Building.Expires?.ToString("yyyy/MM/dd")',
					selectedCity: null,
					cityId: @Model.Building.CityId,
					cities: [],
					fullScreen: false,
					images: [],
					uploading: false,
					files: [],
					uploadedFiles: [],
					uploadedSize: 0,
					totalSize: 0,
					uploadProgress: 0,
					toast: useToast(),
					errors: []
				}
			},
			watch: {
				selectedCity(newValue) {
					if (newValue && newValue.id)
						this.cityId = newValue.id;
					else
						this.cityId = 0;
				}
			},
			methods: {
				fetchData() {
					this.errors.length = 0;
					@if(Model.CanEdit)
					{
						@:this.fetchCities();
					}

					this.fetchImages();
				},
				fetchCities(search) {
					_fetchCities(this, search);
				},
				fetchImages() {
					_fetchImages(this);
				},
				onFilesSelected(event) {
					this.uploadedSize = 0;
					this.files = event.files;

					let totalSize = 0;
					this.files.forEach((file) => {
						totalSize += file.size;
					});
					this.totalSize = totalSize;
					this.updateProgress();
				},
				onRemoveFile(file, fileRemoveCallback, index) {
					fileRemoveCallback(index);
					this.totalSize -= file.size;
				},
				onClearUpload(clear) {
					clear();
					this.uploadedSize = 0;
					this.totalSize = 0;
					this.updateProgress();
				},
				async onUpload(event) {
					this.errors.length = 0;
					this.uploadedSize = 0;
					this.uploadProgress = 0;

					const params = new URLSearchParams({
						id: "@Model.Id"
					})
					const url = `@Url.Action("AddImage", "Buildings", new
					             {
						             area = "Admin",
					             })?${params}`;
					const files = event.files;

					for (const file of files) {
						const formData = new FormData();
						formData.append("image", file);

						try {
							const response = await fetch(url,
								{
									method: "post",
									body: formData,
									headers: {
										RequestVerificationToken: "@Antiforgery.GetAndStoreTokens(Context).RequestToken"
									},
									credentials: "same-origin"
								});

							if (!response.ok) {
								const error = await getResponseError(response);
								throw error;
							}

							this.uploadedFiles = [...this.uploadedFiles, file];
							this.uploadedSize += file.size;
							this.updateProgress();
						} catch (e) {
							const error = e.message || e;
							this.errors.push(error);
						}
					}

					if (this.errors.length) return;
					this.uploading = false;
					await this.fetchImages();
				},
				onFilesUploaded(event) {
					this.uploadedFiles = event.files;
					this.uploadedSize = 0;
					this.totalSize = 0;
					this.updateProgress();
					this.$toast.add({ severity: 'info', summary: 'تم بنجاح', detail: 'اكتمل تحميل الملف', life: 3000 });
				},
				onError(event) {
					if (event.files && event.files.length) {
						for (const file of event.files) {
							this.errors.push(`حدث خطأ أثناء تحميل الملف ${file.name}.`);
						}
					} else {
						this.errors.push("حدث خطأ أثناء التحميل.");
					}
				},
				updateProgress() {
					if (!this.totalSize || !this.uploadedSize) {
						this.uploadProgress = 0;
						return;
					}

					this.uploadProgress = Math.ceil((this.uploadedSize / parseFloat(this.totalSize)) * 100);
				},
				formatSize(bytes) {
					_formatSize(bytes);
				}
			},
			mounted() {
				this.fetchData();
			}
		})
		.use(primevue.config.default)
		.use(primevue.toastservice)
		.component("autocomplete", primevue.autocomplete)
		.component("calendar", primevue.calendar)
		.component("galleria", primevue.galleria)
		.component("fileupload", primevue.fileupload)
		.component("progressbar", primevue.progressbar)
		.component("toast", primevue.toast)
		.mount("#buildingForm");
</script>
