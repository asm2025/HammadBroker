@using Microsoft.AspNetCore.Antiforgery
@using HammadBroker.Model
@using HammadBroker.Model.DTO
@using HammadBroker.Model.VirtualPath
@using System.Configuration
@using System.Globalization
@using System.Net
@using HammadBroker.Model.Configuration
@using Humanizer
@using JetBrains.Annotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Configuration
@inject IAntiforgery Antiforgery
@inject IAuthorizationService AuthorizationService
@inject VirtualPathSettings VirtualPathSettings
@inject CompanyInfo CompanyInfo
@inject IConfiguration Configuration
@model BuildingModel

@{
	bool isAdmin = (await AuthorizationService.AuthorizeAsync(User, Constants.Authorization.AdministrationPolicy)).Succeeded;

	if (!isAdmin)
	{
		Model.CanEdit = false;
		Model.CanUpload = false;
		Model.ReadOnly = true;
	}

	bool isNew = Model.Id == 0;
	string action = Model.CanEdit
						? isNew
						? Url.Action("Add", "Buildings", new
						{
							area = "Admin"
						})
										: Url.Action("Edit", "Buildings", new
										{
											area = "Admin",
											id = Model.Id
										})
						: null;
	IBuildingImageLookup buildingImageLookup = Model.Building as IBuildingImageLookup;
	PathContent assetsPath = VirtualPathSettings.PathContents?.FirstOrDefault(e => e.Alias.IsSame("AssetImages")) ?? throw new ConfigurationErrorsException($"{nameof(VirtualPathSettings)} does not contain a definition for AssetImages.");
	string placeholderImage = Configuration.GetValue("Images:AssetPlaceholder", string.Empty);
	if (string.IsNullOrEmpty(placeholderImage)) throw new ConfigurationErrorsException("Images:AssetPlaceholder is missing.");
	string assetsBasePath = assetsPath.RequestPath.Trim('/');
	placeholderImage = $"/{assetsBasePath}/{placeholderImage}";
	CultureInfo ciar = CultureInfo.GetCultureInfo("ar");

	if (buildingImageLookup != null && !string.IsNullOrEmpty(buildingImageLookup.ImageUrl))
	{
		TempData["Image"] = $"{Context.Request.Scheme}://{Context.Request.Host}/{assetsBasePath}/{buildingImageLookup.ImageUrl}";
	}

	TempData["Type"] = "article";
}

<div id="buildingForm" v-scope>
	@if (Model.CanEdit)
	{
		@:<form action="@action" Method="post" enctype="multipart/form-data">
		<div asp-validation-summary="ModelOnly"></div>
		@Html.AntiForgeryToken()
		<input type="hidden" asp-for="Id" />
	}

	<div class="card card-body mt-3">
		@if (Model.CanEdit)
		{
			<galleria v-show="!uploading" ref="galleria" :container-class="['galleria', {'no-thumbs': fullScreen}]" :value="images" :show-thumbnails="!fullScreen"
				circular :full-screen="fullScreen" v-model:visible="galVisible" :num-visible="5" show-item-navigators show-item-navigators-on-hover>
				<template #item="{ item }">
					<img :src="item.imageUrl" alt="" class="img-fluid img-mh-100p img-h-512" v-on:click="fullScreen = false" />
					<span v-if="item.priority" class="position-absolute top-0 end-0 m-1 badge rounded-pill bg-danger">
						{{ item.priority }}
						<span class="visually-hidden">priority</span>
					</span>
				</template>
				<template #thumbnail="{ item }">
					<img :src="item.imageUrl" alt="" class="img-fluid img-w-64" />
					<span v-if="item.priority" class="position-absolute top-0 end-0 m-1 badge rounded-pill bg-danger">
						{{ item.priority }}
						<span class="visually-hidden">priority</span>
					</span>
					<div class="actions gap-1" dir="rtl">
						<input class="form-check-input" type="checkbox" :value="item.id" v-on:change="onThumbSelection" />
						<button type="button" class="btn btn-outline-secondary btn-sm border-0 mb-1" v-on:click="setImagePriorityValue($event, item.id, item.priority)" title="تعيين أولوية الصورة"><i class="fa fa-sort"></i></button>
						<button type="button" class="btn btn-outline-danger btn-sm border-0 mb-1" v-on:click="deleteImage(item.id)" title="حذف الصورة"><i class="fa fa-xmark"></i></button>
					</div>
				</template>
			</galleria>
			<overlaypanel ref="op">
				<div class="row g-0 px-1">
					<label class="form-label col-sm-4 col-md-12">@Html.DisplayNameForInnerType((BuildingImageToAdd e) => e.Priority)</label>
					<input type="number" class="form-control col-sm-8 col-md-12" v-model="imagePriority.priority" />
				</div>
				<div class="row g-0 px-1">
					<button type="button" class="btn btn-primary" v-on:click="setImagePriority">
						تعيين
					</button>
				</div>
			</overlaypanel>
		}
		else
		{
			<galleria ref="galleria" :container-class="'galleria no-thumbs'" :value="images" :show-thumbnails="false" circular full-screen
					v-model:visible="fullScreen" show-item-navigators show-item-navigators-on-hover change-item-on-indicator-hover>
				<template #item="{ item }">
					<img :src="item.imageUrl" alt="" class="img-fluid img-mh-100p" v-on:click="fullScreen = false" />
				</template>
			</galleria>
		}
		<div class="card-deck2 align-items-stretch mb-2">
			@if (!Model.CanEdit)
			{
				<div class="card card-body">
					@if (string.IsNullOrEmpty(Model.Building.VideoId))
					{
						<img class="img-fluid img-wh-100" :src="`@Context.Request.Scheme://@Context.Request.Host${(images && images.length && images[0].imageUrl ? images[0].imageUrl : '@placeholderImage')}`" alt=""
							v-on:error="`this.onerror=null;this.src='@Context.Request.Scheme://@Context.Request.Host@placeholderImage'`"/>
						<div class="position-absolute bottom-0 mb-3 mx-3 d-flex align-items-center z-3">
							@if (Model.CanUpload)
							{
								<button v-if="!fullScreen" type="button" class="btn btn-light me-1" v-on:click="uploading = !uploading">
									<i class="fa fa-plus"></i>
									إضافة صور
								</button>
							}
							<button v-if="images && images.length" type="button" class="btn btn-light me-1" v-on:click="fullScreen = true">
								<i class="fa fa-camera"></i>
								تصفح ال {{ images.length }} صورة
							</button>
						</div>
					}
					else
					{
						<vid-asset VideoId="@Model.Building.VideoId" Class="ratio ratio-16x9"/>
					}
				</div>
			}
			else if (isNew)
			{
				<div class="card card-body">
					<div class="zone-item flex-column mx-auto active" style="width: 50%;">
						<div class="tile">
							<img class="img-fluid img-wh-100" src="@Context.Request.Scheme://@Context.Request.Host@placeholderImage" alt="" />
						</div>
					</div>
				</div>
			}
			<div v-if="@Model.CanUpload.ToString().ToLowerInvariant() || images && images.length" class="card card-body">
				<div :class="'drop-zone'">
					@if (!Model.CanEdit)
					{
						<div v-if="images && images.length > 1" :class="['zone-item flex-column', { active: !uploading }]">
							<div class="tile">
								<img class="img-fluid img-wh-100" :src="`@Context.Request.Scheme://@Context.Request.Host${images[1].imageUrl}`" alt=""
									v-on:error="`this.onerror=null;this.src='@Context.Request.Scheme://@Context.Request.Host@placeholderImage'`"/>
							</div>
							<div v-if="images && images.length > 2" class="tile">
								<img class="img-fluid img-wh-100" :src="`@Context.Request.Scheme://@Context.Request.Host${images[2].imageUrl}`" alt=""
									v-on:error="`this.onerror=null;this.src='@Context.Request.Scheme://@Context.Request.Host@placeholderImage'`"/>
							</div>
						</div>
					}
					@if (Model.CanUpload)
					{
						<div :class="['zone-item', { active: uploading }]">
							<fileupload accept="@Constants.Images.Extensions" multiple :file-limit="@Constants.Images.MaxImagesUpload" :max-file-size="@Constants.Images.FileSizeMax"
										:custom-upload="true" v-on:select="onFilesSelected" v-on:uploader="onUpload" v-on:upload="onFilesUploaded" v-on:error="onError">
								<template #header="{ chooseCallback, uploadCallback, clearCallback, files }">
									<div class="w-100 d-flex flex-wrap align-items-center gap-2">
										<div class="d-flex flex-grow-1 gap-2">
											<button type="button" class="btn btn-outline-secondary btn-sm" title="اختيار ملفات" v-on:click="chooseCallback()"><i class="fa fa-images"></i></button>
											<button v-if="files && files.length" type="button" class="btn btn-outline-secondary btn-sm" title="تحميل" v-on:click="uploadCallback()"><i class="fa fa-cloud-upload"></i></button>
											<button v-if="files && files.length" type="button" class="btn btn-outline-secondary btn-sm" title="حذف" v-on:click="clearCallback()"><i class="fa fa-times"></i></button>
										</div>
										<ProgressBar v-show="uploadProgress > 0" :value="uploadProgress" :show-value="false" :class="['md:w-10rem h-1rem w-full md:mr-auto', {'exceeded-progress-bar': (uploadProgress > 100)}]">
										</ProgressBar>
									</div>
								</template>
								<template #empty>
									<div class="content">
										<i class="fa fa-cloud-upload border-2 border-circle p-5 lead text-200 border-200"></i>
										<div class="position-absolute">اسحب الملفات الى هنا للتحميل.</div>
									</div>
								</template>
								<template #content="{ files, uploadedFiles, messages, onUploadedFileRemove, onFileRemove }">
									<div v-if="messages && messages.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="message of messages">
										{{ message }}
										<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
									</div>
									<div v-if="files && files.length > 0">
										<h5>التحميل</h5>
										<div v-for="(file, index) of files" :key="file.name + file.type + file.size" class="card m-0">
											<span class="position-absolute top-0 start-0 border border-light p-1 m-1 badge rounded-pill text-bg-warning"><span class="visually-hidden">في انتظار التحميل</span></span>
											<img class="card-img-top" role="presentation" :alt="file.name" :src="file.objectURL"/>
											<div class="card-body">
												<div class="card-title text-truncate">{{ file.name }}</div>
												<div class="d-flex align-items-center">
													<div class="card-text flex-grow-1">{{ formatSize(file.size) }}</div>
													<button type="button" class="btn btn-outline-danger btn-sm" v-on:click="onRemoveFile(file, onFileRemove, index)"><i class="fa fa-times"></i></button>
												</div>
											</div>
										</div>
									</div>
									<div v-if="uploadedFiles && uploadedFiles.length > 0">
										<h5>إكتمل</h5>
										<div v-for="(file, index) of uploadedFiles" :key="file.name + file.type + file.size" class="card m-0">
											<span class="position-absolute top-0 start-0 border border-light p-1 m-1 badge rounded-pill text-bg-success"><span class="visually-hidden">في انتظار التحميل</span></span>
											<img class="card-img-top" role="presentation" :alt="file.name" :src="file.objectURL"/>
											<div class="card-body">
												<div class="card-title text-truncate">{{ file.name }}</div>
												<div class="d-flex align-items-center">
													<div class="card-text flex-grow-1">{{ formatSize(file.size) }}</div>
													<button type="button" class="btn btn-outline-danger btn-sm" v-on:click="onUploadedFileRemove(index)"><i class="fa fa-times"></i></button>
												</div>
											</div>
										</div>
									</div>
								</template>
							</fileupload>
						</div>
					}
					<div v-if="images && images.length" ref="zoneFooter" class="zone-footer mb-2" dir="ltr">
						<button type="button" v-if="!uploading" class="btn btn-light btn-sm border-0 me-1" v-on:click="fullScreen = true">
							<i :class="['fa', fullScreen ? 'fa-minimize' : 'fa-maximize']"></i>
						</button>
						@if (Model.CanUpload)
						{
							<button type="button" v-if="!fullScreen" class="btn btn-light btn-sm border-0 me-1" v-on:click="uploading = !uploading">
								<i :class="['fa', uploading ? 'fa-image' : 'fa-cloud-arrow-up']"></i>
							</button>
						}
					</div>
				</div>
			</div>
		</div>
		@if (Model.CanEdit)
		{
			<div class="d-flex gap-1 align-items-center py-1">
				<button type="button" v-if="!uploading && images && images.length" class="btn btn-light mb-1" v-on:click="fullScreen = true">
					<i :class="['fa', fullScreen ? 'fa-minimize' : 'fa-maximize']"></i>
					تكبير الشاشة
				</button>
				@if (Model.CanUpload)
				{
					<button type="button" v-if="!fullScreen && !uploading" class="btn btn-light mb-1" v-on:click="uploading = true">
						<i :class="['fa', uploading ? 'fa-image' : 'fa-cloud-arrow-up']"></i>
						تحميل
					</button>
					<button type="button" v-if="!fullScreen && uploading && images && images.length" class="btn btn-light mb-1" v-on:click="uploading = false">
						<i :class="['fa', uploading ? 'fa-image' : 'fa-cloud-arrow-up']"></i>
						الصور
					</button>
				}
				<a v-if="!fullScreen && !uploading && selectedImages && selectedImages.length" class="btn btn-danger mb-1" v-on:click="deleteImages()" title="حذف الصور" :disabled="!selectedImages || !selectedImages.length">
					<i class="fa fa-xmark"></i>
					حذف
				</a>
			</div>
		}

		<div v-if="errors && errors.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="error of errors">
			{{ error }}
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>

		@if (Model.CanEdit)
		{
			<div class="row g-0 px-2">
				<div class="col-sm-12 col-md-6">
					<label asp-for="Building.Date" class="form-label"></label>
					<input type="hidden" name="@($"{nameof(Model.Building)}.{nameof(Model.Building.Date)}")" :value="date"/>
					<calendar class="w-100" v-model="date" selection-mode="single" date-format="yy/mm/dd">
					</calendar>
					<span asp-validation-for="Building.Date" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-6">
					<label asp-for="Building.Expires" class="form-label"></label>
					<input type="hidden" name="@($"{nameof(Model.Building)}.{nameof(Model.Building.Expires)}")" :value="expires"/>
					<calendar class="w-100" v-model="expires" selection-mode="single" date-format="yy/mm/dd">
					</calendar>
					<span asp-validation-for="Building.Expires" class="text-danger"></span>
				</div>
			</div>
			<div class="row g-0 px-2">
				<div class="col-sm-12 col-md-6">
					<label asp-for="Building.Reference" class="form-label"></label>
					<input class="form-control" asp-for="Building.Reference" />
					<span asp-validation-for="Building.Reference" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-6">
					<label asp-for="Building.VideoId" class="form-label"></label>
					<input class="form-control" asp-for="Building.VideoId" />
					<span asp-validation-for="Building.VideoId" class="text-danger"></span>
				</div>
			</div>
			<div class="row g-0 px-2">
				<div class="col-sm-12 col-md-3">
					<label asp-for="Building.BuildingType" class="form-label"></label>
					<select asp-for="Building.BuildingType" class="form-select" asp-items="Html.GetEnumSelectList<BuildingType>()">
						<option value="">@Html.DisplayNameFor(e => e.Building.BuildingType)</option>
					</select>
					<span asp-validation-for="Building.BuildingType" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-3">
					<label asp-for="Building.FinishingType" class="form-label"></label>
					<select asp-for="Building.FinishingType" class="form-select" asp-items="Html.GetEnumSelectList<FinishingType>()">
						<option value="">@Html.DisplayNameFor(e => e.Building.FinishingType)</option>
					</select>
					<span asp-validation-for="Building.FinishingType" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-3">
					<label asp-for="Building.AdType" class="form-label"></label>
					<select asp-for="Building.AdType" class="form-select" asp-items="Html.GetEnumSelectList<BuildingAdType>()">
						<option value="">@Html.DisplayNameFor(e => e.Building.AdType)</option>
					</select>
					<span asp-validation-for="Building.AdType" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-3">
					<label asp-for="Building.Priority" class="form-label"></label>
					<input class="form-control" asp-for="Building.Priority" />
					<span asp-validation-for="Building.Priority" class="text-danger"></span>
				</div>
			</div>
			<div class="row g-0 px-2">
				<div class="col-sm-12 col-md-3">
					<label asp-for="Building.Rooms" class="form-label"></label>
					<input class="form-control" asp-for="Building.Rooms" />
					<span asp-validation-for="Building.Rooms" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-3">
					<label asp-for="Building.Bathrooms" class="form-label"></label>
					<input class="form-control" asp-for="Building.Bathrooms" />
					<span asp-validation-for="Building.Bathrooms" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-3">
					<label asp-for="Building.Area" class="form-label"></label>
					<input class="form-control" asp-for="Building.Area" />
					<span asp-validation-for="Building.Area" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-3">
					<label asp-for="Building.Floor" class="form-label"></label>
					<select class="form-select" asp-for="Building.Floor" asp-items="Html.GetEnumSelectList<Floors>()">
						<option value="">@Html.DisplayNameFor(e => e.Building.Floor)</option>
					</select>
					<span asp-validation-for="Building.Floor" class="text-danger"></span>
				</div>
			</div>
		}
		else
		{
			<div class="row g-0 px-2">
				<div class="col-12">
					<h5 class="mt-3">@Model.Building.BuildingTypeName @Model.Building.AdTypeName @Model.Building.FinishingTypeName</h5>
				</div>
			</div>
			<div class="row g-0 px-2">
				@if (Model.Building.Floor.HasValue)
				{
					<div class="col mt-2">
						<i class="fa fa-building"></i>&nbsp;
						<label asp-for="Building.Floor" class="form-label"></label>&nbsp;
						@Html.DisplayFor(e => e.Building.FloorName)
					</div>
				}
				@if (Model.Building.Rooms > 0)
				{
					<div class="col mt-2">
						<i class="fa fa-person-shelter"></i>&nbsp;
						<label asp-for="Building.Rooms" class="form-label"></label>&nbsp;
						@Html.DisplayFor(e => e.Building.Rooms)
					</div>
				}
				@if (Model.Building.Bathrooms > 0)
				{
					<div class="col mt-2">
						<i class="fa fa-restroom"></i>&nbsp;
						<label asp-for="Building.Bathrooms" class="form-label"></label>&nbsp;
						@Html.DisplayFor(e => e.Building.Bathrooms)
					</div>
				}
				@if (Model.Building.Area > 0)
				{
					<div class="col mt-2">
						<i class="fa fa-square"></i>&nbsp;
						<label asp-for="Building.Area" class="form-label"></label>&nbsp;
						@Html.DisplayFor(e => e.Building.Area) م
					</div>
				}
			</div>
		}
	</div>

	<div class="card card-body mt-3">
		@if (Model.CanEdit)
		{
			<div class="row g-0 px-2">
				<div class="col-sm-12 col-md-4">
					<label asp-for="Building.Price" class="form-label"></label>
					<input class="form-control" asp-for="Building.Price" />
					<span asp-validation-for="Building.Price" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-4">
					<label asp-for="Building.Phone" class="form-label"></label>
					<input class="form-control" asp-for="Building.Phone" dir="ltr" />
					<span asp-validation-for="Building.Phone" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-4">
					<label asp-for="Building.Mobile" class="form-label"></label>
					<input class="form-control" asp-for="Building.Mobile" dir="ltr" />
					<span asp-validation-for="Building.Mobile" class="text-danger"></span>
				</div>
			</div>
		}
		else
		{
			<div class="d-flex g-0 align-items-center mt-3 px-2">
				<div class="flex-grow-1 fw-bold">
					<label asp-for="Building.Price" class="form-label"></label>&nbsp;
					@Html.DisplayFor(e => e.Building.Price) جنيه
				</div>
				<div class="d-inline-flex gap-1">
					@if (!string.IsNullOrEmpty(Model.Building.Phone))
					{
						<button type="button" class="btn btn-danger mb-1 text-nowrap" dir="ltr" onclick="this.firstChild.textContent = '@Model.Building.Phone'">
							تليفون
							<i class="fa fa-phone"></i>
						</button>
					}
					@if (!string.IsNullOrEmpty(Model.Building.Mobile))
					{
						<button type="button" class="btn btn-danger mb-1 text-nowrap" dir="ltr" onclick="this.firstChild.textContent = '@Model.Building.Mobile'">
							جوال
							<i class="fa fa-mobile-screen"></i>
						</button>
					}
					@if (!string.IsNullOrEmpty(CompanyInfo.Email))
					{
						<a class="btn btn-danger mb-1 text-nowrap" href="mailto:@CompanyInfo.Email?subject=@WebUtility.UrlEncode($"معلومات حول العقار {Model.Building.Reference}")" dir="ltr">
							إيميل
							<i class="fa fa-envelope"></i>
						</a>
					}
					<a href="@GetWhatsAppLink()" class="btn btn-success mb-1 text-nowrap" target="_blank" dir="ltr">
						واتس آب
						<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
							viewBox="0 0 32 32" class="whatsApp-svg-icon">
							<path d=" M19.11 17.205c-.372 0-1.088 1.39-1.518 1.39a.63.63 0 0 1-.315-.1c-.802-.402-1.504-.817-2.163-1.447-.545-.516-1.146-1.29-1.46-1.963a.426.426 0 0 1-.073-.215c0-.33.99-.945.99-1.49 0-.143-.73-2.09-.832-2.335-.143-.372-.214-.487-.6-.487-.187 0-.36-.043-.53-.043-.302 0-.53.115-.746.315-.688.645-1.032 1.318-1.06 2.264v.114c-.015.99.472 1.977 1.017 2.78 1.23 1.82 2.506 3.41 4.554 4.34.616.287 2.035.888 2.722.888.817 0 2.15-.515 2.478-1.318.13-.33.244-.73.244-1.088 0-.058 0-.144-.03-.215-.1-.172-2.434-1.39-2.678-1.39zm-2.908 7.593c-1.747 0-3.48-.53-4.942-1.49L7.793 24.41l1.132-3.337a8.955 8.955 0 0 1-1.72-5.272c0-4.955 4.04-8.995 8.997-8.995S25.2 10.845 25.2 15.8c0 4.958-4.04 8.998-8.998 8.998zm0-19.798c-5.96 0-10.8 4.842-10.8 10.8 0 1.964.53 3.898 1.546 5.574L5 27.176l5.974-1.92a10.807 10.807 0 0 0 16.03-9.455c0-5.958-4.842-10.8-10.802-10.8z" fill-rule="evenodd"></path>
						</svg>
					</a>
				</div>
			</div>
		}
	</div>
	
	<div class="card card-body mt-3">
		<h5 class="py-3">الموقع</h5>

		@if (Model.CanEdit)
		{
			<div class="row g-0 px-2">
				<div class="col-12">
					<label asp-for="Building.Address" class="form-label"></label>
					<input class="form-control" asp-for="Building.Address" />
					<span asp-validation-for="Building.Address" class="text-danger"></span>
				</div>
			</div>
			<div class="row g-0 px-2">
				<div class="col-sm-12 col-md-6">
					<label asp-for="Building.Address2" class="form-label"></label>
					<input class="form-control" asp-for="Building.Address2" />
					<span asp-validation-for="Building.Address2" class="text-danger"></span>
				</div>
				<div class="col-sm-12 col-md-6">
					<label asp-for="Building.CityId" class="form-label"></label>
					<input type="hidden" asp-for="Building.CityId" :value="cityId" />
					<autocomplete class="w-100" input-class="w-100" :suggestions="cities" option-label="name"
								:min-length="0" v-model="selectedCity" data-key="id" dropdown 
								v-on:complete="fetchCities($event.query)">
					</autocomplete>
					<span asp-validation-for="Building.CityId" class="text-danger"></span>
				</div>
			</div>
			
		}
		else
		{
			<div class="row g-0 px-2">
				<div class="col-12">
					<i class="fa fa-location-dot"></i>
					@Html.DisplayFor(e => e.Building.Address)
					&nbsp;
					@Html.DisplayFor(e => e.Building.Address2)
					&nbsp;
					@if (Model.Building is ICityNameLookup cityNameLookup && !string.IsNullOrEmpty(cityNameLookup.CityName))
					{
						@Html.DisplayFor(e => cityNameLookup.CityName)
					}
				</div>
			</div>
		}
	</div>
	
	<div class="card card-body mt-3">
		<h5 class="py-3">تفاصيل العقار</h5>

		@if (Model.CanEdit)
		{
			<div class="row g-0 px-2">
				<div class="col-12">
					<label asp-for="Building.ShortDescription" class="form-label"></label>
					<input class="form-control" asp-for="Building.ShortDescription" />
					<span asp-validation-for="Building.ShortDescription" class="text-danger"></span>
				</div>
			</div>
			<div class="row g-0 px-2">
				<div class="col-12">
					<label asp-for="Building.Description" class="form-label"></label>
					<textarea class="form-control" asp-for="Building.Description" rows="5">
					</textarea>
					<span asp-validation-for="Building.Description" class="text-danger"></span>
				</div>
			</div>
			<div class="row g-0 px-2 my-1">
				<button type="submit" class="btn btn-primary border-0 me-1">حفظ</button>
				@if (!isNew)
				{
					<a class="btn btn-outline-primary border-0 me-1" asp-area="Admin" asp-controller="Buildings" asp-action="Get" asp-route-id="@Model.Id">الغاء</a>
				}
				else
				{
					<a class="btn btn-outline-primary border-0 me-1" asp-area="Admin" asp-controller="Buildings" asp-action="Index">الغاء</a>
				}
			</div>
		}
		else
		{
			@if (!string.IsNullOrEmpty(Model.Building.ShortDescription))
			{
				<div class="row g-0 px-2">
					<div class="col-12 mt-2">
						@Html.DisplayFor(e => Model.Building.ShortDescription)
					</div>
				</div>
			}
			@if (!string.IsNullOrEmpty(Model.Building.Description))
			{
				<div class="row g-0 px-2 mt-2">
					<a type="button" class="btn btn-light collapsible collapsed" data-bs-toggle="collapse" 
						href="#buildingDescription" role="button" aria-expanded="false" 
						aria-controls="buildingDescription">
						إقرأ المزيد
					</a>
					<div id="buildingDescription" class="col-12 linebreaks collapse">
						<pre>@Model.Building.Description</pre>
					</div>
				</div>
			}

			<div class="row g-0 px-2 mt-2">
				<hr />
				<div class="col-sm-12 col-md-4">
					<small class="text-muted">
						<label asp-for="Building.Reference" class="form-label"></label>&nbsp;
						@Html.DisplayFor(e => e.Building.Reference)
					</small>
				</div>
				<div class="col-sm-12 col-md-4">
					<small class="text-muted">
						<label asp-for="Building.CreatedOn" class="form-label"></label>&nbsp;
						@Model.Building.CreatedOn.Humanize(culture: ciar)
					</small>
				</div>
				<div class="col-sm-12 col-md-4">
					<small class="text-muted">
						<label asp-for="Building.UpdatedOn" class="form-label"></label>&nbsp;
						@Model.Building.UpdatedOn.Humanize(culture: ciar)
					</small>
				</div>
			</div>
		}
	</div>

	@if (Model.CanEdit)
	{
		@:</form>
	}
	else if (!Model.ReadOnly)
	{
		<div class="row g-0 px-2 mt-3">
			<a asp-area="Admin" asp-controller="Buildings" asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary border-0 me-1">تعديل</a>
		</div>
	}
</div>

<script type="text/javascript" defer>
	const { createApp, nextTick, ref } = Vue;
	const { useToast } = primevue.usetoast;

	const DELAY = 300;
	const _FILE_SIZES = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
	const _formatSize = (bytes) => {
		if (!bytes) return '0 B';

		const k = 1000;
		const dm = 3;
		const i = Math.floor(Math.log(bytes) / Math.log(k));

		return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + _FILE_SIZES[i];
	};
	const _fetchCities = _.debounce(async (self, search) => {
		self.loading = true;
		search = search && search.trim();

		try {
			const params = new URLSearchParams({
				search: search ? encodeURIComponent(search) : ""
			});
			const url = `@Url.Action("List", "Cities", new
			             {
				             area = "Admin"
			             })?${params}`;
			const response = await window.fetch(url);

			if (!response.ok) {
				const error = await getResponseError(response);
				throw error;
			}

			self.cities = await response.json();
			if (self.cityId) self.selectedCity = self.cities.find(e => e.id === self.cityId);
		} catch (e) {
			self.selectedCity = null;
			self.cities = [];
			alert(e.message || e);
		} finally {
			self.loading = false;
		}
		}, DELAY, { leading: true });
	const _fetchImages = _.debounce(async (self) => {
		self.errors.length = 0;
		
		const id = @Model.Id;

		if (!id) {
			self.images = [];
			self.uploading = true;
			return;
		}

		self.loading = true;

		try {
			const params = new URLSearchParams({
				id
			});
			const url = `@Url.Action("ListImages", "Buildings", new
			             {
				             area = "Admin"
			             })?${params}`;
			const response = await window.fetch(url);

			if (!response.ok) {
				const error = await getResponseError(response);
				throw error;
			}

			self.images = await response.json();
		} catch (e) {
			self.images = [];
			alert(e.message || e);
		} finally {
			self.loading = false;
		}

		self.uploading = Boolean(!self.images || !self.images.length);
	}, DELAY, { trailing: true });

	createApp({
			data() {
				return {
					loading: false,
					date: '@Model.Building.Date.ToString("yyyy/MM/dd")',
					expires: '@Model.Building.Expires?.ToString("yyyy/MM/dd")',
					selectedCity: null,
					cityId: @Model.Building.CityId,
					cities: [],
					fullScreen: false,
					galVisible: true,
					images: [],
					selectedImages: [],
					imagePriority: null,
					uploading: false,
					files: [],
					uploadedFiles: [],
					uploadedSize: 0,
					totalSize: 0,
					uploadProgress: 0,
					toast: useToast(),
					errors: []
				}
			},
			watch: {
				selectedCity(newValue) {
					if (newValue)
						this.cityId = newValue.id;
					else
						this.cityId = 0;
				},
				galVisible(newValue) {
					if (newValue) return;
					this.fullScreen = false;
					this.galVisible = true;
				}
			},
			methods: {
				fetchData() {
					this.errors.length = 0;
					@if(Model.CanEdit)
					{
						@:this.fetchCities();
					}

					this.fetchImages();
				},
				fetchCities(search) {
					_fetchCities(this, search);
				},
				fetchImages() {
					_fetchImages(this);
				},
				setImagePriorityValue(event, id, priority) {
					if (!id) return;

					const value = priority ? parseInt(priority) : null;
					
					if (value) {
						if (value < 0) value = 0;
						if (value > 255) value = 255;
					}

					this.imagePriority = {
						id,
						priority: value
					};
					this.$refs.op.toggle(event);
				},
				async setImagePriority(event) {
					this.errors.length = 0;
					this.$refs.op.toggle(event);
					if (!this.imagePriority || !this.imagePriority.id) return;

					const { id, priority } = this.imagePriority;
					this.imagePriority = null;
					this.loading = true;

					try {
						const url = "@Url.Action("SetImagePriority", "Buildings", new
						             {
							             area = "Admin"
						             })";
						const formData = new FormData();
						formData.append("id", id);
						formData.append("priority", priority);

						const response = await window.fetch(url,
						{
							method: "post",
							body: formData,
							headers: {
								RequestVerificationToken: "@Antiforgery.GetAndStoreTokens(Context).RequestToken"
							},
							credentials: "same-origin"
						});

						if (!response.ok) {
							const error = await getResponseError(response);
							throw error;
						}

						this.fetchImages();
					} catch (e) {
						alert(e.message || e);
					} finally {
						this.loading = false;
					}
				},
				onThumbSelection(event) {
					const { checked } = event.target;
					const value = parseInt(event.target.value);

					if (checked) {
						this.selectedImages.push(value);
						return;
					}

					const ndx = this.selectedImages.findIndex(e => e === value);
					if (ndx < 0) return;
					this.selectedImages.splice(ndx, 1);
				},
				async deleteImage(id) {
					this.errors.length = 0;
					if (!id) return;
					this.loading = true;

					try {
						const url = "@Url.Action("DeleteImage", "Buildings", new
						             {
							             area = "Admin"
						             })";
						const formData = new FormData();
						formData.append("id", id);

						const response = await window.fetch(url,
						{
							method: "post",
							body: formData,
							headers: {
								RequestVerificationToken: "@Antiforgery.GetAndStoreTokens(Context).RequestToken"
							},
							credentials: "same-origin"
						});

						if (!response.ok) {
							const error = await getResponseError(response);
							throw error;
						}

						this.fetchImages();
					} catch (e) {
						alert(e.message || e);
					} finally {
						this.loading = false;
					}
				},
				async deleteImages() {
					this.errors.length = 0;
					if (!this.selectedImages || !this.selectedImages.length) return;
					this.loading = true;

					try {
						const url = "@Url.Action("DeleteImages", "Buildings", new
						             {
							             area = "Admin"
						             })";
						const formData = new FormData();

						for (let i = 0; i < this.selectedImages.length; i++) {
							formData.append(`id[${i}]`, this.selectedImages[i]);
						}

						const response = await window.fetch(url,
						{
							method: "post",
							body: formData,
							headers: {
								RequestVerificationToken: "@Antiforgery.GetAndStoreTokens(Context).RequestToken"
							},
							credentials: "same-origin"
						});

						if (!response.ok) {
							const error = await getResponseError(response);
							throw error;
						}

						this.selectedImages.length = 0;
						this.fetchImages();
					} catch (e) {
						alert(e.message || e);
					} finally {
						this.loading = false;
					}
				},
				onFilesSelected(event) {
					this.uploadedSize = 0;
					this.files = event.files;

					let totalSize = 0;
					this.files.forEach((file) => {
						totalSize += file.size;
					});
					this.totalSize = totalSize;
					this.updateProgress();
				},
				onRemoveFile(file, fileRemoveCallback, index) {
					fileRemoveCallback(index);
					this.totalSize -= file.size;
				},
				onClearUpload(clear) {
					clear();
					this.uploadedSize = 0;
					this.totalSize = 0;
					this.updateProgress();
				},
				async onUpload(event) {
					this.errors.length = 0;
					this.uploadedSize = 0;
					this.uploadProgress = 0;

					const params = new URLSearchParams({
						id: @Model.Id
					})
					const url = `@Url.Action("AddImage", "Buildings", new
					             {
						             area = "Admin",
					             })?${params}`;
					const files = event.files;

					for (const file of files) {
						const formData = new FormData();
						formData.append("image", file);

						try {
							const response = await fetch(url,
								{
									method: "post",
									body: formData,
									headers: {
										RequestVerificationToken: "@Antiforgery.GetAndStoreTokens(Context).RequestToken"
									},
									credentials: "same-origin"
								});

							if (!response.ok) {
								const error = await getResponseError(response);
								throw error;
							}

							this.uploadedFiles = [...this.uploadedFiles, file];
							this.uploadedSize += file.size;
							this.updateProgress();
						} catch (e) {
							const error = e.message || e;
							this.errors.push(error);
						}
					}

					if (this.errors.length) return;
					this.uploading = false;
					this.fetchImages();
				},
				onFilesUploaded(event) {
					this.uploadedFiles = event.files;
					this.uploadedSize = 0;
					this.totalSize = 0;
					this.updateProgress();
					this.$toast.add({ severity: 'info', summary: 'تم بنجاح', detail: 'اكتمل تحميل الملف', life: 3000 });
				},
				onError(event) {
					if (event.files && event.files.length) {
						for (const file of event.files) {
							this.errors.push(`حدث خطأ أثناء تحميل الملف ${file.name}.`);
						}
					} else {
						this.errors.push("حدث خطأ أثناء التحميل.");
					}
				},
				updateProgress() {
					if (!this.totalSize || !this.uploadedSize) {
						this.uploadProgress = 0;
						return;
					}

					this.uploadProgress = Math.ceil((this.uploadedSize / parseFloat(this.totalSize)) * 100);
				},
				formatSize(bytes) {
					_formatSize(bytes);
				}
			},
			mounted() {
				this.fetchData();
			}
		})
		.use(primevue.config.default)
		.use(primevue.toastservice)
		.component("autocomplete", primevue.autocomplete)
		.component("calendar", primevue.calendar)
		.component("galleria", primevue.galleria)
		.component("overlaypanel", primevue.overlaypanel)
		.component("fileupload", primevue.fileupload)
		.component("progressbar", primevue.progressbar)
		.component("toast", primevue.toast)
		.mount("#buildingForm");
</script>

@functions {
	[NotNull]
	string GetWhatsAppLink()
	{
		IBuilding building = Model.Building;
		string targetUrl = Url.Action("Get", "Home", new
		{
			area = string.Empty,
			id = Model.Id
		}, Context.Request.Scheme);
		string cityName = building is ICityNameLookup cityNameLookup ? cityNameLookup.CityName : null;
		string location = string.Join(" - ", building.Address, building.Address2, cityName).Trim('-', ' ');
		string message = $@"مرحبًا، أود الحصول على المزيد من المعلومات حول هذا العقار للبيع، المنشور على موقع {Context.Request.Host}
المرجع: {building.Reference} نوع العقار: {building.BuildingTypeName} السعر: {building.Price} جنيه الموقع: {location}
الرابط: {targetUrl}";
		return $"https://wa.me/{CompanyInfo.WhatsAppNumber}?text={WebUtility.UrlEncode(message)}";
	}
}