@using Microsoft.AspNetCore.Antiforgery
@using HammadBroker.Model
@using HammadBroker.Model.DTO
@using HammadBroker.Model.Configuration
@using HammadBroker.Model.VirtualPath
@using System.Configuration
@using Microsoft.Extensions.Configuration
@inject IAntiforgery Antiforgery
@inject CompanyInfo CompanyInfo
@inject VirtualPathSettings VirtualPathSettings
@inject IConfiguration Configuration
@model BuildingAdModel

@{
	string action = Url.Action(Model.Id > 0 ? "Edit" : "Add", "Ads", new
						{
							area = "Admin",
							id = Model.Id
						});
	PathContent assetsPath = VirtualPathSettings.PathContents?.FirstOrDefault(e => e.Alias.IsSame("AssetImages")) ?? throw new ConfigurationErrorsException($"{nameof(VirtualPathSettings)} does not contain a definition for AssetImages.");
	string basePath = assetsPath.RequestPath.Trim('/');
	string placeholderImage = Configuration.GetValue("Images:AssetPlaceholder", string.Empty);
}

<div id="buildingAdForm" v-scope class="card card-body mt-3">
	@if (Model.CanEdit)
	{
		<div v-if="Boolean(building)" class="mb-2">
			<div class="row g-0">
				<div class="col-12">
					<small class="text-muted">#{{ building.id }} {{ building.buildingTypeName }} {{ building.finishingTypeName }}</small>
					<h5>{{ building.name }}</h5>
				</div>
				<div v-if="building.floor" class="col-6 mb-1">
					<label asp-for="Building.Floor"></label>:&nbsp;
					{{ building.floor }}
				</div>
				<div v-if="building.rooms" class="col-6 mb-1">
					<label asp-for="Building.Rooms"></label>:&nbsp;
					{{ building.rooms }}
				</div>
				<div v-if="building.bathrooms" class="col-6 mb-1">
					<label asp-for="Building.Bathrooms"></label>:&nbsp;
					{{ building.bathrooms }}
				</div>
				<div v-if="building.area" class="col-6 mb-1">
					<label asp-for="Building.Area"></label>:&nbsp;
					{{ building.area }}
				</div>
				<div v-if="building.address" class="col-12">
					<label asp-for="Building.Address"></label>:&nbsp;
					{{ building.address }}
				</div>
				<div v-if="building.address2" class="col-12">
					<label asp-for="Building.Address2"></label>:&nbsp;
					{{ building.address2 }}
				</div>
				<div v-if="building.cityName" class="col-6 mb-1">
					<label asp-for="Building.CityId"></label>:&nbsp;
					{{ building.cityName }}
				</div>
				<div v-if="building.countryName" class="col-6 mb-1">
					<label asp-for="Building.CountryCode"></label>:&nbsp;
					{{ building.countryName }}
				</div>
				<div v-if="building.description" class="col-12 linebreaks">
					<label asp-for="Building.Description"></label>:&nbsp;
					{{ building.description }}
				</div>
			</div>
		</div>
		<div class="row g-0">
			<div class="col-12">
				<select asp-for="Ad.AdType" class="form-select" asp-items="Html.GetEnumSelectList<BuildingAdType>()" title="@Html.DisplayNameFor(e => e.Ad.AdType)">
					<option value="">@Html.DisplayNameFor(e => e.Ad.AdType)</option>
				</select>
				<span asp-validation-for="Ad.AdType" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0">
			<div class="col-sm-12 col-md-6">
				<input type="hidden" name="@($"{nameof(Model.Ad)}.{nameof(BuildingAdToUpdate.Date)}")" :value="date"/>
				<calendar class="w-100" placeholder="@Html.DisplayNameFor(e => e.Ad.Date)" v-model="date"
						selection-mode="single" date-format="yy/mm/dd">
				</calendar>
				<span asp-validation-for="Ad.Date" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-6">
				<input type="hidden" name="@($"{nameof(Model.Ad)}.{nameof(BuildingAdToUpdate.Expires)}")" :value="expires"/>
				<calendar class="w-100" placeholder="@Html.DisplayNameFor(e => e.Ad.Expires)" v-model="expires"
						selection-mode="single" date-format="yy/mm/dd">
				</calendar>
				<span asp-validation-for="Ad.Expires" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0">
			<div class="col-sm-12 col-md-6">
				<input class="form-control" asp-for="Ad.Phone" placeholder="@Html.DisplayNameFor(e => e.Ad.Phone)" title="@Html.DisplayNameFor(e => e.Ad.Phone)"/>
				<span asp-validation-for="Ad.Phone" class="text-danger"></span>
			</div>
			<div class="col-sm-12 col-md-6">
				<input class="form-control" asp-for="Ad.Mobile" placeholder="@Html.DisplayNameFor(e => e.Ad.Mobile)" title="@Html.DisplayNameFor(e => e.Ad.Mobile)"/>
				<span asp-validation-for="Ad.Mobile" class="text-danger"></span>
			</div>
		</div>
		<div class="row g-0">
			<div class="col-12">
				<input class="form-control" asp-for="Ad.Price" placeholder="@Html.DisplayNameFor(e => e.Ad.Price)" title="@Html.DisplayNameFor(e => e.Ad.Price)"/>
				<span asp-validation-for="Ad.Price" class="text-danger"></span>
			</div>
		</div>
		<div class="g-0 my-1">
			<button type="submit" class="btn btn-primary border-0 me-1">حفظ</button>
			@if (Model.Id > 0)
			{
				<a class="btn btn-outline-primary border-0 me-1" asp-area="Admin" asp-controller="Ads" asp-action="Get" asp-route-id="@Model.Id">الغاء</a>
			}
			else
			{
				<a class="btn btn-outline-primary border-0 me-1" asp-area="Admin" asp-controller="Ads" asp-action="Index" asp-route-id="@Model.Id">الغاء</a>
			}
		</div>
		@:</form>
	}
	else
	{
		<div class="row g-0 px-2">
			<div class="col-12">
				@if (Model.Building is not null)
				{
					<small class="text-muted">#@Model.Building.Id @Model.Building.BuildingTypeName @Model.Building.FinishingTypeName @Model.Ad.AdTypeName</small>
					<h5>@Model.Building.Name</h5>
				}
				else
				{
					<small class="text-muted">@Model.Ad.Date.ToString("d") @Model.Ad.AdTypeName</small>
				}
			</div>
			@if (Model.Building is not null)
			{
				@if (Model.Building.Floor > 0)
				{
					<div class="col-6">
						<label asp-for="Building.Floor"></label>:&nbsp;
						@Html.DisplayFor(e => e.Building.Floor)
					</div>
				}
				@if (Model.Building.Rooms > 0)
				{
					<div class="col-6">
						<label asp-for="Building.Rooms"></label>:&nbsp;
						@Html.DisplayFor(e => e.Building.Rooms)
					</div>
				}
				@if (Model.Building.Bathrooms > 0)
				{
					<div class="col-6">
						<label asp-for="Building.Bathrooms"></label>:&nbsp;
						@Html.DisplayFor(e => e.Building.Bathrooms)
					</div>
				}
				@if (Model.Building.Area > 0)
				{
					<div class="col-6">
						<label asp-for="Building.Area"></label>:&nbsp;
						@Html.DisplayFor(e => e.Building.Area) م
					</div>
				}
				@if (!string.IsNullOrEmpty(Model.Building.Address))
				{
					<div class="col-12">
						<label asp-for="Building.Address"></label>:&nbsp;
						@Html.DisplayFor(e => e.Building.Address)
					</div>
				}
				@if (!string.IsNullOrEmpty(Model.Building.Address2))
				{
					<div class="col-12">
						<label asp-for="Building.Address2"></label>:&nbsp;
						@Html.DisplayFor(e => e.Building.Address2)
					</div>
				}
				@if (Model.Building is ICityNameLookup cityNameLookup && !string.IsNullOrEmpty(cityNameLookup.CityName))
				{
					<div class="col-6">
						<label asp-for="Building.CityId"></label>:&nbsp;
						@Html.DisplayFor(e => cityNameLookup.CityName)
					</div>
				}
				@if (Model.Building.CountryCode != CompanyInfo.CountryCode && Model.Building is ICountryNameLookup countryNameLookup && !string.IsNullOrEmpty(countryNameLookup.CountryName))
				{
					<div class="col-6">
						<label asp-for="Building.CountryCode"></label>:&nbsp;
						@Html.DisplayFor(e => countryNameLookup.CountryName)
					</div>
				}
			}
			@if (!string.IsNullOrEmpty(Model.Ad.Phone))
			{
				<div class="col-6">
					<label asp-for="Ad.Phone"></label>
					@Html.DisplayFor(e => e.Ad.Phone)
				</div>
			}
			@if (!string.IsNullOrEmpty(Model.Ad.Mobile))
			{
				<div class="col-6">
					<label asp-for="Ad.Mobile"></label>
					@Html.DisplayFor(e => e.Ad.Mobile)
				</div>
			}
			<div class="col-12">
				<label asp-for="Ad.Price"></label>
				@Html.DisplayFor(e => e.Ad.Price) جنيه
			</div>
			@if (Model.Building is not null && !string.IsNullOrEmpty(Model.Building.Description))
			{
				<div class="col-12 linebreaks">
					@Html.Raw(Html.Encode(Model.Building.Description).Replace("\n", "<br />"))
				</div>
			}
		</div>
		@if (!Model.ReadOnly)
		{
			<div class="g-0 px-2 my-4">
				<a asp-area="Admin" asp-controller="Ads" asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">تعديل</a>
			</div>
		}
	}
</div>

<script type="text/javascript" defer>
	const { createApp, nextTick, ref } = Vue;
	const { useToast } = primevue.usetoast;

	const DELAY = 300;
	const _FILE_SIZES = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
	const _formatSize = (bytes) => {
		if (!bytes) return '0 B';

		const k = 1000;
		const dm = 3;
		const i = Math.floor(Math.log(bytes) / Math.log(k));

		return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + _FILE_SIZES[i];
	};

	const _fetchBuildings = _.debounce(async (self, search) => {
			self.loading = true;
			search = search && search.trim();

			try {
				const url = `@Url.Action("List", "Buildings", new
						 {
							 area = "Admin"
						 })`;
				const params = new URLSearchParams({
					search: search ? encodeURIComponent(search) : ""
				});
				const response = await window.fetch(url + "?" + params);

				if (!response.ok) {
					const error = await getResponseError(response);
					throw error;
				}

				self.buildings = await response.json();
				self.selectedBuilding = self.buildings.find(e => e.id === self.buildingId);
				await _fetchBuilding(self, self.buildingId);
			} catch (e) {
				self.selectedBuilding = null;
				self.buildings = [];
				alert(e.message || e);
			} finally {
				self.loading = false;
			}
		},
		DELAY,
		{ leading: true });
	const _fetchBuilding = _.debounce(async (self, id) => {
			if (!id) {
				self.building = null;
				self.images = [];
				return;
			}

			self.loading = true;

			try {
				const url = `@Url.Action("GetById", "Buildings", new
						 {
							 area = "Admin"
						 })`;
				const params = new URLSearchParams({
					id
				});
				const response = await window.fetch(url + "?" + params);

				if (!response.ok) {
					const error = await getResponseError(response);
					throw error;
				}

				self.building = await response.json();
				self.selectedBuilding = self.buildings.find(e => e.id === self.buildingId);
				
				if (self.building)
					await _fetchImages(self, id);
				else
					self.images = [];
			} catch (e) {
				self.selectedBuilding = null;
				self.building = null;
				self.images = [];
				alert(e.message || e);
			} finally {
				self.loading = false;
			}
		},
		DELAY,
		{ trailing: true });
	const _fetchCountries = _.debounce(async (self, search) => {
			self.errors.length = 0;
			self.loading = true;
			search = search && search.trim();

			try {
				const url = `@Url.Action("Countries", "Cities", new
				             {
					             area = "Admin"
				             })`;
				const params = new URLSearchParams({
					countryCode: self.countryCode,
					search: search ? encodeURIComponent(search) : ""
				});
				const response = await window.fetch(url + "?" + params);

				if (!response.ok) {
					const error = await getResponseError(response);
					throw error;
				}

				self.countries = await response.json();
				if (self.countryCode) self.selectedCountry = self.countries.find(e => e.id === self.countryCode);
			} catch (e) {
				self.selectedCountry = null;
				self.countries = [];
				alert(e.message || e);
			} finally {
				self.loading = false;
			}
		},
		DELAY,
		{ leading: true });
	const _fetchCities = _.debounce(async (self, countryCode, search) => {
		if (!countryCode) {
			self.selectedCity = null;
			self.cities = [];
			return;
		}

		self.loading = true;
		search = search && search.trim();

		try {
			const url = `@Url.Action("List", "Cities", new
			             {
				             area = "Admin"
			             })`;
			const params = new URLSearchParams({
				countryCode: self.countryCode,
				search: search ? encodeURIComponent(search) : ""
			});
			const response = await window.fetch(url + "?" + params);

			if (!response.ok) {
				const error = await getResponseError(response);
				throw error;
			}

			self.cities = await response.json();
			if (self.cityId) self.selectedCity = self.cities.find(e => e.id === self.cityId);
		} catch (e) {
			self.selectedCity = null;
			self.cities = [];
			alert(e.message || e);
		} finally {
			self.loading = false;
		}
		},
		DELAY,
		{ leading: true });
	const _fetchImages = _.debounce(async (self, id) => {
		self.errors.length = 0;
		
		if (!id) {
			self.images = [];
			return;
		}

		self.loading = true;

		try {
			const url = `@Url.Action("ListImages", "Buildings", new
						            {
							            area = "Admin"
						            })`;
			const params = new URLSearchParams({
				id
			});
			const response = await window.fetch(url + "?" + params);

			if (!response.ok) {
				const error = await getResponseError(response);
				throw error;
			}

			self.images = await response.json();
		} catch (e) {
			self.images = [];
			alert(e.message || e);
		} finally {
			self.loading = false;
		}
	},
	DELAY,
	{ trailing: true });

	createApp({
			data() {
				return {
					loading: false,
					selectedBuilding: null,
					buildingId: @Model.Ad.BuildingId,
					building: @Html.Raw(Model.Building is null ? "null" : Json.Serialize(Model.Building)),
					buildings: [],
					date: '@Model.Ad.Date.ToString("yyyy/MM/dd")',
					expires: '@Model.Ad.Expires?.ToString("yyyy/MM/dd")',
					selectedCountry: null,
					countryCode: null,
					countries: [],
					selectedCity: null,
					cityId: 0,
					cities: [],
					fullScreen: false,
					images: [],
					uploading: false,
					files: [],
					uploadedFiles: [],
					uploadedSize: 0,
					totalSize: 0,
					uploadProgress: 0,
					toast: useToast(),
					errors: []
				}
			},
			watch: {
				selectedBuilding(newValue) {
					if (newValue && newValue.id)
						this.buildingId = newValue.id;
					else
						this.buildingId = 0;
				},
				selectedCountry(newValue) {
					if (newValue && newValue.id)
						this.countryCode = newValue.id;
					else
						this.countryCode = "";
				},
				selectedCity(newValue) {
					if (newValue && newValue.id)
						this.cityId = newValue.id;
					else
						this.cityId = 0;
				}
			},
			methods: {
				async fetchData() {
					this.errors.length = 0;
					
					@if (Model.Id == 0)
					{
						@:this.fetchBuildings();
					}
					else
					{
						@:this.fetchBuilding(@Model.Id);
					}
				},
				fetchBuildings(search) {
					_fetchBuildings(this, search);
				},
				fetchBuilding(id) {
					_fetchBuilding(this, id);
				},
				fetchCountries(search) {
					_fetchCountries(this, search);
				},
				fetchCities(countryCode, search) {
					_fetchCities(this, countryCode, search);
				},
				fetchImages() {
					_fetchImages(this, this.buildingId);
				},
				onFilesSelected(event) {
					this.uploadedSize = 0;
					this.files = event.files;

					let totalSize = 0;
					this.files.forEach((file) => {
						totalSize += file.size;
					});
					this.totalSize = totalSize;
					this.updateProgress();
				},
				onRemoveFile(file, fileRemoveCallback, index) {
					fileRemoveCallback(index);
					this.totalSize -= file.size;
				},
				onClearUpload(clear) {
					clear();
					this.uploadedSize = 0;
					this.totalSize = 0;
					this.updateProgress();
				},
				async onUpload(event) {
					this.errors.length = 0;
					this.uploadedSize = 0;
					this.uploadProgress = 0;

					const url = "@Url.Action("AddImage", "Buildings", new
					             {
						             area = "Admin",
						             Model.Id
					             })";
					const files = event.files;

					for (const file of files) {
						const formData = new FormData();
						formData.append("image", file);

						try {
							const response = await fetch(url,
								{
									method: "post",
									body: formData,
									headers: {
										RequestVerificationToken: "@Antiforgery.GetAndStoreTokens(Context).RequestToken"
									},
									credentials: "same-origin"
								});

							if (!response.ok) {
								const error = await getResponseError(response);
								throw error;
							}

							this.uploadedFiles = [...this.uploadedFiles, file];
						} catch (e) {
							const error = e.message || e;
							this.errors.push(error);
						} finally {
							this.uploadedSize += file.size;
							this.updateProgress();
						}
					}

					if (this.errors.length) return;
					this.uploading = false;
					await this.fetchImages();
				},
				onFilesUploaded(event) {
					this.uploadedFiles = event.files;
					this.uploadedSize = 0;
					this.totalSize = 0;
					this.updateProgress();
					this.$toast.add({ severity: 'info', summary: 'تم بنجاح', detail: 'اكتمل تحميل الملف', life: 3000 });
				},
				onError(event) {
					if (event.files && event.files.length) {
						for (const file of event.files) {
							this.errors.push("حدث خطأ أثناء تحميل الملف: " + file.name);
						}
					} else {
						this.errors.push("حدث خطأ أثناء التحميل.");
					}
				},
				updateProgress() {
					if (!this.totalSize || !this.uploadedSize) {
						this.uploadProgress = 0;
						return;
					}

					this.uploadProgress = Math.ceil((this.uploadedSize / parseFloat(this.totalSize)) * 100);
				},
				formatSize(bytes) {
					_formatSize(bytes);
				},
				toggleFullScreen() {
					if (this.fullScreen) {
						this.closeFullScreen();
					} else {
						this.openFullScreen();
					}
				},
				onFullScreenChange() {
					const elem = this.$refs.zoneFooter;
					let parent;

					if (document.fullscreenElement) {
						this.fullScreen = true;
						parent = this.$refs.galleriaFooter;
					} else {
						this.fullScreen = false;
						parent = this.$refs.dropZone;
					}

					parent.appendChild(elem);
				},
				openFullScreen() {
					const elem = this.$refs.galleria.$el;
					if (elem.requestFullscreen) {
						elem.requestFullscreen();
					} else if (elem.mozRequestFullScreen) { /* Firefox */
						elem.mozRequestFullScreen();
					} else if (elem.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
						elem.webkitRequestFullscreen();
					} else if (elem.msRequestFullscreen) { /* IE/Edge */
						elem.msRequestFullscreen();
					}
				},
				closeFullScreen() {
					if (document.exitFullscreen) {
						document.exitFullscreen();
					} else if (document.mozCancelFullScreen) {
						document.mozCancelFullScreen();
					} else if (document.webkitExitFullscreen) {
						document.webkitExitFullscreen();
					} else if (document.msExitFullscreen) {
						document.msExitFullscreen();
					}
				},
				bindDocumentListeners() {
					document.addEventListener("fullscreenchange", this.onFullScreenChange);
					document.addEventListener("mozfullscreenchange", this.onFullScreenChange);
					document.addEventListener("webkitfullscreenchange", this.onFullScreenChange);
					document.addEventListener("msfullscreenchange", this.onFullScreenChange);
				},
				unbindDocumentListeners() {
					document.removeEventListener("fullscreenchange", this.onFullScreenChange);
					document.removeEventListener("mozfullscreenchange", this.onFullScreenChange);
					document.removeEventListener("webkitfullscreenchange", this.onFullScreenChange);
					document.removeEventListener("msfullscreenchange", this.onFullScreenChange);
				}
			},
			mounted() {
				this.bindDocumentListeners();
				this.fetchData();
			},
			unmounted() {
				this.unbindDocumentListeners();
			}
		})
		.use(primevue.config.default)
		.use(primevue.toastservice)
		.component("autocomplete", primevue.autocomplete)
		.component("calendar", primevue.calendar)
		.component("galleria", primevue.galleria)
		.component("fileupload", primevue.fileupload)
		.component("progressbar", primevue.progressbar)
		.component("toast", primevue.toast)
		.mount("#buildingAdForm");
</script>
