@using HammadBroker.Model.DTO
@using HammadBroker.Model
@using HammadBroker.Model.Configuration
@using Humanizer
@using System.Globalization
@inject CompanyInfo CompanyInfo
@model BuildingAdsForDisplayPaginated
@{
	ViewData["Title"] = string.Empty;
	bool hasSearch = Model.Pagination.HasSearch;
	CultureInfo ciar = CultureInfo.GetCultureInfo("ar");
}

<div class="card mb-1">
	<h5 class="card-header @(hasSearch ? null : "collapsed")" data-bs-toggle="collapse" data-bs-target="#searchForm"
		aria-expanded="@(hasSearch ? "true" : "false")" aria-controls="searchForm">
		البحث
	</h5>
	<div id="searchForm" v-scope class="card-body @(hasSearch ? null : "collapse")">
		<form method="get" asp-area="" asp-controller="Home" asp-action="Index">
			<div v-if="errors && errors.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="error of errors">
				{{ error }}
				<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
			</div>

			<div class="row g-0 mb-1">
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.Id)" asp-for="Pagination.Id" placeholder="@Html.DisplayNameFor(e => e.Pagination.Id)" />
				</div>
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.Search)" asp-for="Pagination.Search" placeholder="@Html.DisplayNameFor(e => e.Pagination.Search)" />
				</div>
			</div>
			<div class="row g-0 mb-1">
				<div class="col-sm-12 col-md-6">
					<select class="form-select" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.Type)" asp-for="Pagination.Type" asp-items="Html.GetEnumSelectList<BuildingAdType>()" placeholder="@Html.DisplayNameFor(e => e.Pagination.Type)">
						<option value="">@Html.DisplayNameFor(e => e.Pagination.Type)</option>
					</select>
				</div>
				<div class="col-sm-12 col-md-6">
					<input type="hidden" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.Date)" :value="date" />
					<input type="hidden" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.MaxDate)" :value="maxDate" />
					<calendar class="w-100" placeholder="@Html.DisplayNameFor(e => e.Pagination.Date)"
							  v-model="dateRange" selection-mode="range" date-format="yy/mm/dd">
					</calendar>
				</div>
			</div>
			<div class="row g-0 mb-1">
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.Price)" asp-for="Pagination.Price" placeholder="@Html.DisplayNameFor(e => e.Pagination.Price)" />
				</div>
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.MaxPrice)" asp-for="Pagination.MaxPrice" placeholder="@Html.DisplayNameFor(e => e.Pagination.MaxPrice)" />
				</div>
			</div>
			<div class="row g-0 mb-1">
				<div class="col-sm-12 col-md-6">
					<select class="form-select" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.BuildingType)" asp-for="Pagination.BuildingType" asp-items="Html.GetEnumSelectList<BuildingType>()" placeholder="@Html.DisplayNameFor(e => e.Pagination.BuildingType)">
						<option value="">@Html.DisplayNameFor(e => e.Pagination.BuildingType)</option>
					</select>
				</div>
				<div class="col-sm-12 col-md-6">
					<select class="form-select" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.FinishingType)" asp-for="Pagination.FinishingType" asp-items="Html.GetEnumSelectList<FinishingType>()" placeholder="@Html.DisplayNameFor(e => e.Pagination.FinishingType)">
						<option value="">@Html.DisplayNameFor(e => e.Pagination.FinishingType)</option>
					</select>
				</div>
			</div>
			<div class="row g-0 mb-1">
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.Floor)" asp-for="Pagination.Floor" placeholder="@Html.DisplayNameFor(e => e.Pagination.Floor)" />
				</div>
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.MaxFloor)" asp-for="Pagination.MaxFloor" placeholder="@Html.DisplayNameFor(e => e.Pagination.MaxFloor)" />
				</div>
			</div>
			<div class="row g-0 mb-1">
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.Rooms)" asp-for="Pagination.Rooms" placeholder="@Html.DisplayNameFor(e => e.Pagination.Rooms)" />
				</div>
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.MaxRooms)" asp-for="Pagination.MaxRooms" placeholder="@Html.DisplayNameFor(e => e.Pagination.MaxRooms)" />
				</div>
			</div>
			<div class="row g-0 mb-1">
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.Bathrooms)" asp-for="Pagination.Bathrooms" placeholder="@Html.DisplayNameFor(e => e.Pagination.Bathrooms)" />
				</div>
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.MaxBathrooms)" asp-for="Pagination.MaxBathrooms" placeholder="@Html.DisplayNameFor(e => e.Pagination.MaxBathrooms)" />
				</div>
			</div>
			<div class="row g-0 mb-1">
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.Area)" asp-for="Pagination.Area" placeholder="@Html.DisplayNameFor(e => e.Pagination.Area)" />
				</div>
				<div class="col-sm-12 col-md-6">
					<input class="form-control" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.MaxArea)" asp-for="Pagination.MaxArea" placeholder="@Html.DisplayNameFor(e => e.Pagination.MaxArea)" />
				</div>
			</div>
			<div class="row g-0 mb-1">
				<div class="col-sm-12 col-md-6">
					<input type="hidden" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.CountryCode)" asp-for="Pagination.CountryCode" :value="countryCode" />
					<autocomplete class="w-100" input-class="w-100" :suggestions="countries" option-label="name" placeholder="@Html.DisplayNameFor(e => e.Pagination.CountryCode)"
								  v-model="selectedCountry" data-key="id" dropdown v-on:complete="fetchCountries($event.query)" v-on:change="fetchCities($event.value)">
					</autocomplete>
				</div>
				<div class="col-sm-12 col-md-6">
					<input type="hidden" name="@nameof(BuildingAdsForDisplayPaginated.Pagination.CityId)" asp-for="Pagination.CityId" :value="cityId" />
					<autocomplete class="w-100" input-class="w-100" :suggestions="cities" option-label="name" placeholder="@Html.DisplayNameFor(e => e.Pagination.CityId)"
								  v-model="selectedCity" data-key="id" dropdown v-on:complete="fetchCities(countryCode, $event.query)">
					</autocomplete>
				</div>
			</div>
			<div class="g-0 my-1">
				<button type="submit" class="btn btn-outline-secondary btn-sm me-1"><span class="fa fa-magnifying-glass"></span></button>
				<button type="reset" class="btn btn-outline-secondary btn-sm border-0" v-on:click="onReset"><span class="fa fa-times"></span></button>
			</div>
		</form>
	</div>
</div>

@foreach (BuildingAdForDisplay ad in Model.Result)
{
<div class="card mb-2">
	<div class="row g-0" role="button" onclick="window.location = '@Url.Action("Get", "Home", new { area = "", id = ad.Id })'">
		<div class="col-md-4 p-0 overflow-hidden">
			<img-asset src="@ad.ImageUrl" readonly imageclass="img-fluid rounded-top-right mw-100" />
		</div>
		<div class="col-md-8">
			<div class="card-body px-2 h-100">
				<div class="d-flex flex-column h-100" role="button" onclick="window.location = '@Url.Action("Get", "Home", new { area = "", id = ad.Id })'">
					<small class="text-muted">#@ad.BuildingId @ad.BuildingTypeName @ad.FinishingTypeName @ad.TypeName</small>
					<h5 class="card-title">@Html.DisplayFor(e => ad.Price) جنيه</h5>
					<div class="row g-0">
						<div class="col-12">@ad.Name</div>
					</div>
					<div class="row g-0 flex-grow-1">
						<div class="col-12">
							@Html.DisplayFor(e => ad.Description)
						</div>
					</div>
					<div class="row g-0">
						<div class="col-12">
							<i class="fa fa-location-dot"></i>
							@Html.DisplayFor(e => ad.Address)
							&nbsp;
							@Html.DisplayFor(e => ad.Address2)
							&nbsp;
							@Html.DisplayFor(e => ad.CityName)
							&nbsp;
							@if (ad.CountryCode != CompanyInfo.CountryCode && !string.IsNullOrEmpty(ad.CountryName))
							{
								@Html.DisplayFor(e => ad.CountryName)
							}
						</div>
					</div>
					<div class="row g-0">
						@if (ad.Floor > 0)
						{
							<div class="col">
								<i class="fa fa-building"></i>
								<label for="@nameof(BuildingAdForDisplay.Floor)">@Html.DisplayNameFor(e => ad.Floor) </label>
								@Html.DisplayFor(e => ad.Floor)
							</div>
						}
						@if (ad.Rooms > 0)
						{
							<div class="col">
								<i class="fa fa-person-shelter"></i>
								@Html.DisplayFor(e => ad.Rooms)
								<label for="@nameof(BuildingAdForDisplay.Rooms)">@Html.DisplayNameFor(e => ad.Rooms) </label>
							</div>
						}
						@if (ad.Bathrooms > 0)
						{
							<div class="col">
								<i class="fa fa-restroom"></i>
								@Html.DisplayFor(e => ad.Bathrooms)
								<label for="@nameof(BuildingAdForDisplay.Bathrooms)">@Html.DisplayNameFor(e => ad.Bathrooms) </label>
							</div>
						}
						@if (ad.Area > 0)
						{
							<div class="col">
								<i class="fa fa-square"></i>
								@Html.DisplayFor(e => ad.Area)
								<label for="@nameof(BuildingAdForDisplay.Area)">@Html.DisplayNameFor(e => ad.Area) </label>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="card-footer d-flex align-items-center">
		<div class="flex-grow-1">
			نشر @ad.Date.Humanize(culture: ciar)
		</div>
		<div class="d-inline-flex">
			@if (!string.IsNullOrEmpty(ad.Phone))
			{
				<div class="btn-contact">
					<i class="fa fa-phone fa-xl"></i>
					@Html.DisplayFor(e => ad.Phone)
				</div>
			}
			@if (!string.IsNullOrEmpty(ad.Mobile))
			{
				<div class="btn-contact">
					<i class="fa fa-mobile-screen fa-xl"></i>
					@Html.DisplayFor(e => ad.Mobile)
				</div>
			}
			<div class="btn-contact btn-whatsApp">
				<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
					viewBox="0 0 32 32" class="whatsApp-svg-icon">
					<path d=" M19.11 17.205c-.372 0-1.088 1.39-1.518 1.39a.63.63 0 0 1-.315-.1c-.802-.402-1.504-.817-2.163-1.447-.545-.516-1.146-1.29-1.46-1.963a.426.426 0 0 1-.073-.215c0-.33.99-.945.99-1.49 0-.143-.73-2.09-.832-2.335-.143-.372-.214-.487-.6-.487-.187 0-.36-.043-.53-.043-.302 0-.53.115-.746.315-.688.645-1.032 1.318-1.06 2.264v.114c-.015.99.472 1.977 1.017 2.78 1.23 1.82 2.506 3.41 4.554 4.34.616.287 2.035.888 2.722.888.817 0 2.15-.515 2.478-1.318.13-.33.244-.73.244-1.088 0-.058 0-.144-.03-.215-.1-.172-2.434-1.39-2.678-1.39zm-2.908 7.593c-1.747 0-3.48-.53-4.942-1.49L7.793 24.41l1.132-3.337a8.955 8.955 0 0 1-1.72-5.272c0-4.955 4.04-8.995 8.997-8.995S25.2 10.845 25.2 15.8c0 4.958-4.04 8.998-8.998 8.998zm0-19.798c-5.96 0-10.8 4.842-10.8 10.8 0 1.964.53 3.898 1.546 5.574L5 27.176l5.974-1.92a10.807 10.807 0 0 0 16.03-9.455c0-5.958-4.842-10.8-10.802-10.8z" fill-rule="evenodd"></path>
				</svg>
				إتصل بنا
			</div>
		</div>
	</div>
</div>
}

<partial name="_PaginationPartial" model="Model.Pagination" />

@section scripts
{
	<script type="text/javascript" defer>
		const { createApp, nextTick } = Vue;

		const DELAY = 300;
		const DATE = "@Model.Pagination.Date?.ToString("yyyy/MM/dd")";
		const MAX_DATE = "@Model.Pagination.MaxDate?.ToString("yyyy/MM/dd")";
		const DATE_RANGE = "@string.Join(" - ", Model.Pagination.Date?.ToString("yyyy/MM/dd"), Model.Pagination.MaxDate?.ToString("yyyy/MM/dd")).Trim('-', ' ')";
		createApp({
			data() {
				return {
					loading: false,
					date: DATE,
					maxDate: MAX_DATE,
					dateRange: DATE_RANGE,
					selectedCountry: null,
					countryCode: "@Model.Pagination.CountryCode",
					countries: [],
					selectedCity: null,
					cityId: @Model.Pagination.CityId,
					cities: [],
					errors: []
				}
			},
			watch: {
				selectedCountry(newValue) {
					if (newValue && newValue.id)
						this.countryCode = newValue.id;
					else
						this.countryCode = "";
				},
				selectedCity(newValue) {
					if (newValue && newValue.id)
						this.cityId = newValue.id;
					else
						this.cityId = 0;
				},
				dateRange(newValue) {
					if (!newValue) {
						this.date = null;
						this.maxDate = null;
						return;
					}
					
					if (!_.isArray(newValue)) {
						this.date = newValue;
						this.maxDate = null;
						return;
					}
					
					this.date = newValue[0] ? newValue[0].toLocaleDateString() : null;
					this.maxDate = newValue[1] ? newValue[1].toLocaleDateString() : null;
				}
			},
			methods: {
				async fetchData() {
					this.errors.length = 0;
					await this.fetchCountries();
					await this.fetchCities(this.countryCode);
				},
				async fetchCountries(search) {
					this.loading = true;
					search = search && search.trim();
					
					try {
						const url = `@Url.Action("Countries", "Home", new
									 {
										 area = ""
									 })`;
						const params = new URLSearchParams({
							countryCode: this.countryCode,
							search: search ? encodeURIComponent(search) : ""
						});
						const response = await window.fetch(url + "?" + params);

						if (!response.ok) {
							const error = await getResponseError(response);
							throw error;
						}
						
						this.countries = await response.json();
						this.selectedCountry = this.countries.find(e => e.id === this.countryCode);
					} catch (e) {
						this.selectedCountry = null;
						alert(e.message || e);
					} finally {
						this.loading = false;
					}
				},
				async fetchCities(countryCode, search) {
					if (!countryCode) {
						this.selectedCity = null;
						this.cities = [];
						return;
					}
					
					this.loading = true;
					search = search && search.trim();

					try {
						const url = `@Url.Action("Cities", "Home", new
									 {
										 area = ""
									 })`;
						const params = new URLSearchParams({
							countryCode: this.countryCode,
							search: search ? encodeURIComponent(search) : ""
						});
						const response = await window.fetch(url + "?" + params);

						if (!response.ok) {
							const error = await getResponseError(response);
							throw error;
						}

						this.cities = await response.json();
						this.selectedCity = this.cities.find(e => e.id === this.cityId);
					} catch (e) {
						this.selectedCity = null;
						alert(e.message || e);
					} finally {
						this.loading = false;
					}
				},
				onReset() {
					this.errors.length = 0;
					this.dateRange = null;
					this.selectedCountry = null;
					this.selectedCity = null;
				}
			},
			mounted() {
				this.fetchData();
			}
		})
		.use(primevue.config.default)
		.component("autocomplete", primevue.autocomplete)
		.component("calendar", primevue.calendar)
		.mount("#searchForm");
	</script>
}