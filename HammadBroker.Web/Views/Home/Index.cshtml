@using HammadBroker.Model.DTO
@using HammadBroker.Model
@using Humanizer
@using System.Globalization
@using System.Net
@using HammadBroker.Model.Configuration
@inject CompanyInfo CompanyInfo
@model BuildingsPaginated<BuildingForDisplay>
@{
	ViewData["Title"] = string.Empty;
	bool hasSearch = Model.Pagination.HasSearch;
	CultureInfo ciar = CultureInfo.GetCultureInfo("ar");
}

<div class="card pane mb-1">
	<div class="row g-0">
		<div class="col-4 p-0">
			<img src="@Url.Content("~/images/logo.jpg")" alt="@CompanyInfo.Name" class="img-fluid rounded-start" />
		</div>
		<div class="col-8">
			<div class="card-body">
				<h3 class="card-title mb-3">@CompanyInfo.Name</h3>
				<div>
					<label class="col-form-label">العقارات المتوفرة:</label>
					@Model.Pagination.Count عقار
				</div>
			</div>
		</div>
	</div>
	<div class="card-footer bg-white">
		<h5 class="pt-3">نبذة عن @CompanyInfo.Name</h5>
		@if (!string.IsNullOrEmpty(CompanyInfo.Description))
		{
			<div>@CompanyInfo.Description</div>
		}
		<div class="py-3">
			<label class="form-label">المكتب الرئيسي:</label>
			@CompanyInfo.Address @string.Join(" - ", CompanyInfo.Address2, CompanyInfo.City)
		</div>
	</div>
</div>

<div class="card card-body pane mb-1">
	<h5 class="card-title mb-3">تواصل مع الوسيط</h5>
	<div class="row g-0">
		@if (!string.IsNullOrEmpty(CompanyInfo.Phone))
		{
			<button type="button" class="btn btn-danger btn-lg w-100 mb-2" dir="ltr" onclick="this.firstChild.textContent = '@CompanyInfo.Phone'">
				إتصل بالوسيط العقاري
				<i class="fa fa-phone"></i>
			</button>
		}
		@if (!string.IsNullOrEmpty(CompanyInfo.Mobile))
		{
			<button type="button" class="btn btn-danger btn-lg w-100 mb-2" dir="ltr" onclick="this.firstChild.textContent = '@CompanyInfo.Mobile'">
				إتصل بالوسيط العقاري
				<i class="fa fa-mobile-screen"></i>
			</button>
		}
		@if (!string.IsNullOrEmpty(CompanyInfo.Email))
		{
			<a class="btn btn-danger btn-lg w-100 mb-2" dir="ltr" href="mailto:@CompanyInfo.Email?subject=@WebUtility.UrlEncode("معلومات حول")">
				راسل الوسيط 
				<i class="fa fa-envelope"></i>
			</a>
		}
	</div>
</div>

<div class="card px-4 mb-1 pane-active">
	<h5 class="card-title text-center py-3">عقاراتي (@Model.Pagination.Count)</h5>

	@if (Model.Pagination.Count > Model.Pagination.PageSize || hasSearch)
	{
		<h5 class="card-header @(hasSearch ? null : "collapsed")" data-bs-toggle="collapse" data-bs-target="#searchForm"
			aria-expanded="@(hasSearch ? "true" : "false")" aria-controls="searchForm">
			البحث
		</h5>
		<div id="searchForm" v-scope class="@(hasSearch ? null : "collapse")">
			<form method="get" asp-area="" asp-controller="Home" asp-action="Index">
				<div v-if="errors && errors.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="error of errors">
					{{ error }}
					<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
				</div>

				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-4">
						<label asp-for="Pagination.Id" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Id)" asp-for="Pagination.Id" />
					</div>
					<div class="col-sm-12 col-md-4">
						<label asp-for="Pagination.BuildingType" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.BuildingType)" asp-for="Pagination.BuildingType" asp-items="Html.GetEnumSelectList<BuildingType>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.BuildingType)</option>
						</select>
					</div>
					<div class="col-sm-12 col-md-4">
						<label asp-for="Pagination.FinishingType" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.FinishingType)" asp-for="Pagination.FinishingType" asp-items="Html.GetEnumSelectList<FinishingType>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.FinishingType)</option>
						</select>
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-6">
						<label asp-for="Pagination.AdType" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.AdType)" asp-for="Pagination.AdType" asp-items="Html.GetEnumSelectList<BuildingAdType>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.AdType)</option>
						</select>
					</div>
					<div class="col-sm-12 col-md-6">
						<label asp-for="Pagination.Date" class="form-label"></label>
						<input type="hidden" name="@nameof(Model.Pagination.Date)" :value="date"/>
						<input type="hidden" name="@nameof(Model.Pagination.MaxDate)" :value="maxDate"/>
						<calendar class="w-100" v-model="dateRange" selection-mode="range" date-format="yy/mm/dd">
						</calendar>
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-8">
						<label asp-for="Pagination.Address" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Address)" asp-for="Pagination.Address" />
					</div>
					<div class="col-sm-12 col-md-4">
						<label asp-for="Pagination.CityId" class="form-label"></label>
						<input type="hidden" name="@nameof(Model.Pagination.CityId)" asp-for="Pagination.CityId" :value="cityId" />
						<autocomplete class="w-100" input-class="w-100" :suggestions="cities" option-label="name"
						v-model="selectedCity" data-key="id" dropdown v-on:complete="fetchCities($event.query)">
						</autocomplete>
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.Rooms" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Rooms)" asp-for="Pagination.Rooms" />
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.MaxRooms" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.MaxRooms)" asp-for="Pagination.MaxRooms" />
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.Bathrooms" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Bathrooms)" asp-for="Pagination.Bathrooms" />
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.MaxBathrooms" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.MaxBathrooms)" asp-for="Pagination.MaxBathrooms" />
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.Floor" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.Floor)" asp-for="Pagination.Floor" asp-items="Html.GetEnumSelectList<Floors>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.Floor)</option>
						</select>
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.MaxFloor" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.MaxFloor)" asp-for="Pagination.MaxFloor" asp-items="Html.GetEnumSelectList<Floors>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.Floor)</option>
						</select>
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.Area" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Area)" asp-for="Pagination.Area" />
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.MaxArea" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.MaxArea)" asp-for="Pagination.MaxArea" />
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-6">
						<label asp-for="Pagination.Price" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Price)" asp-for="Pagination.Price" />
					</div>
					<div class="col-sm-12 col-md-6">
						<label asp-for="Pagination.MaxPrice" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.MaxPrice)" asp-for="Pagination.MaxPrice" />
					</div>
				</div>
				<div class="row g-0 px-2 my-1">
					<button type="submit" class="btn btn-outline-secondary btn-sm me-1"><span class="fa fa-magnifying-glass"></span></button>
					<button type="reset" class="btn btn-outline-secondary btn-sm border-0" v-on:click="onReset"><span class="fa fa-times"></span></button>
				</div>
			</form>
		</div>
	}

	@foreach (BuildingForDisplay building in Model.Result)
	{
		<div class="card mb-2">
			<div class="row g-0" role="button" onclick="window.location = '@Url.Action("Get", "Home", new { area = "", id = building.Id })'">
				<div class="col-md-4 p-0 overflow-hidden">
					<img-asset src="@building.ImageUrl" readonly imageclass="img-fluid img-wh-100 rounded-top-right mw-100" />
				</div>
				<div class="col-md-8">
					<div class="card-body px-2 h-100">
						<div class="d-flex flex-column h-100" role="button" onclick="window.location = '@Url.Action("Get", "Home", new { area = "", id = building.Id })'">
							<small class="text-muted">#@building.Id @building.BuildingTypeName @building.FinishingTypeName @building.AdTypeName</small>
							<h5 class="card-title">@Html.DisplayFor(e => building.Price) جنيه</h5>
							<div class="row g-0 flex-grow-1">
								<div class="col-12">
									@Html.DisplayFor(e => building.ShortDescription)
								</div>
							</div>
							<div class="row g-0">
								<div class="col-12">
									<p>
										<i class="fa fa-location-dot"></i>
										@Html.DisplayFor(e => building.Address)
									</p>
									<p>
										@if (!string.IsNullOrEmpty(building.Address2))
										{
											@Html.DisplayFor(e => building.Address2)
											@:&nbsp;
										}
										@Html.DisplayFor(e => building.CityName)
									</p>
								</div>
							</div>
							<div class="row g-0">
								@if (building.Floor.HasValue)
								{
									<div class="col">
										<i class="fa fa-building"></i>&nbsp;
										<label for="@nameof(building.Floor)">@Html.DisplayNameFor(e => building.Floor) </label>
										@Html.DisplayFor(e => building.FloorName)
									</div>
								}
								@if (building.Rooms > 0)
								{
									<div class="col">
										<i class="fa fa-person-shelter"></i>&nbsp;
										@Html.DisplayFor(e => building.Rooms)
										<label for="@nameof(building.Rooms)">@Html.DisplayNameFor(e => building.Rooms) </label>
									</div>
								}
								@if (building.Bathrooms > 0)
								{
									<div class="col">
										<i class="fa fa-restroom"></i>&nbsp;
										@Html.DisplayFor(e => building.Bathrooms)
										<label for="@nameof(building.Bathrooms)">@Html.DisplayNameFor(e => building.Bathrooms) </label>
									</div>
								}
								@if (building.Area > 0)
								{
									<div class="col">
										<i class="fa fa-square"></i>&nbsp;
										@Html.DisplayFor(e => building.Area)
										<label for="@nameof(building.Area)">@Html.DisplayNameFor(e => building.Area) </label>
									</div>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="card-footer d-flex align-items-center">
				<div class="flex-grow-1">
					نشر @building.Date.Humanize(culture: ciar)
				</div>
				<div class="d-inline-flex">
					@if (!string.IsNullOrEmpty(building.Phone))
					{
						<div class="btn-contact" dir="ltr" onclick="this.firstChild.textContent = '@building.Phone'">
							إتصل
							<i class="fa fa-phone fa-xl"></i>
						</div>
					}
					@if (!string.IsNullOrEmpty(building.Mobile))
					{
						<div class="btn-contact" dir="ltr" onclick="this.firstChild.textContent = '@building.Mobile'">
							إتصل
							<i class="fa fa-mobile-screen fa-xl"></i>
						</div>
					}
					@if (!string.IsNullOrEmpty(CompanyInfo.Email))
					{
						<div class="btn-contact" dir="ltr">
							<a href="mailto:@CompanyInfo.Email?subject=@WebUtility.UrlEncode($"معلومات حول العقار {building.Id}")">
								إيميل
								<i class="fa fa-envelope fa-xl"></i>
							</a>
						</div>
					}
					<div class="btn-contact btn-whatsApp">
						<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
							viewBox="0 0 32 32" class="whatsApp-svg-icon">
							<path d=" M19.11 17.205c-.372 0-1.088 1.39-1.518 1.39a.63.63 0 0 1-.315-.1c-.802-.402-1.504-.817-2.163-1.447-.545-.516-1.146-1.29-1.46-1.963a.426.426 0 0 1-.073-.215c0-.33.99-.945.99-1.49 0-.143-.73-2.09-.832-2.335-.143-.372-.214-.487-.6-.487-.187 0-.36-.043-.53-.043-.302 0-.53.115-.746.315-.688.645-1.032 1.318-1.06 2.264v.114c-.015.99.472 1.977 1.017 2.78 1.23 1.82 2.506 3.41 4.554 4.34.616.287 2.035.888 2.722.888.817 0 2.15-.515 2.478-1.318.13-.33.244-.73.244-1.088 0-.058 0-.144-.03-.215-.1-.172-2.434-1.39-2.678-1.39zm-2.908 7.593c-1.747 0-3.48-.53-4.942-1.49L7.793 24.41l1.132-3.337a8.955 8.955 0 0 1-1.72-5.272c0-4.955 4.04-8.995 8.997-8.995S25.2 10.845 25.2 15.8c0 4.958-4.04 8.998-8.998 8.998zm0-19.798c-5.96 0-10.8 4.842-10.8 10.8 0 1.964.53 3.898 1.546 5.574L5 27.176l5.974-1.92a10.807 10.807 0 0 0 16.03-9.455c0-5.958-4.842-10.8-10.802-10.8z" fill-rule="evenodd"></path>
						</svg>
						واتس آب
					</div>
				</div>
			</div>
		</div>
	}

	<partial name="_PaginationPartial" model="Model.Pagination" />
</div>

@section scripts
{
	<script type="text/javascript" defer>
		const { createApp, nextTick } = Vue;

		const DELAY = 300;
		const DATE = "@Model.Pagination.Date?.ToString("yyyy/MM/dd")";
		const MAX_DATE = "@Model.Pagination.MaxDate?.ToString("yyyy/MM/dd")";
		const DATE_RANGE = "@string.Join(" - ", Model.Pagination.Date?.ToString("yyyy/MM/dd"), Model.Pagination.MaxDate?.ToString("yyyy/MM/dd")).Trim('-', ' ')";
		
		createApp({
			data() {
				return {
					loading: false,
					date: DATE,
					maxDate: MAX_DATE,
					dateRange: DATE_RANGE,
					selectedCity: null,
					cityId: @Model.Pagination.CityId,
					cities: [],
					errors: []
				}
			},
			watch: {
				selectedCity(newValue) {
					if (newValue && newValue.id)
						this.cityId = newValue.id;
					else
						this.cityId = 0;
				},
				dateRange(newValue) {
					if (!newValue) {
						this.date = null;
						this.maxDate = null;
						return;
					}
					
					if (!_.isArray(newValue)) {
						this.date = newValue;
						this.maxDate = null;
						return;
					}
					
					this.date = newValue[0] ? newValue[0].toLocaleDateString() : null;
					this.maxDate = newValue[1] ? newValue[1].toLocaleDateString() : null;
				}
			},
			methods: {
				async fetchData() {
					this.errors.length = 0;
					await this.fetchCities();
				},
				async fetchCities(search) {
					this.loading = true;
					search = search && search.trim();

					try {
						const params = new URLSearchParams({
							countryCode: this.countryCode,
							search: search ? encodeURIComponent(search) : ""
						});
						const url = `@Url.Action("Cities", "Home", new
									 {
										 area = ""
									 })?${params}`;
						const response = await window.fetch(url);

						if (!response.ok) {
							const error = await getResponseError(response);
							throw error;
						}

						this.cities = await response.json();
						this.selectedCity = this.cities.find(e => e.id === this.cityId);
					} catch (e) {
						this.selectedCity = null;
						alert(e.message || e);
					} finally {
						this.loading = false;
					}
				},
				onReset() {
					this.errors.length = 0;
					this.dateRange = null;
					this.selectedCountry = null;
					this.selectedCity = null;
				}
			},
			mounted() {
				this.fetchData();
			}
		})
		.use(primevue.config.default)
		.component("autocomplete", primevue.autocomplete)
		.component("calendar", primevue.calendar)
		.mount("#searchForm");
	</script>
}