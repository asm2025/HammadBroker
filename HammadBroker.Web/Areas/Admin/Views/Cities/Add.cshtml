@model HammadBroker.Model.DTO.CityToUpdate

@{
	ViewData["Title"] = "إضافة مدينة";
}

<form asp-area="Admin" asp-controller="Cities" asp-action="Add" Method="post" enctype="multipart/form-data">
	<div id="countryForm" v-scope class="card card-body mt-3">
		<div asp-validation-summary="ModelOnly"></div>
		<div class="text-danger" v-if="errors.length">
			<div v-for="error in errors">{{ error }}</div>
		</div>

		<div class="form-floating mb-1">
			<input type="hidden" asp-for="CountryCode" :value="countryCode" />
			<autocomplete name="@nameof(Model.CountryCode)" class="w-100" input-class="w-100" :suggestions="countries"
						  option-label="name" placeholder="البلد" :min-length="0" v-model="selectedCountry" data-key="id"
						v-on:complete="fetchCountries($event.query)">
			</autocomplete>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Name" placeholder="@Html.DisplayNameFor(E => Model.Name)"/>
			<label class="form-label" asp-for="Name"></label>
			<span asp-validation-for="Name" class="text-danger"></span>
		</div>
		<div class="my-1">
			<button type="submit" class="btn btn-outline-primary border-0">إضافة</button>
		</div>
	</div>
</form>

@section scripts
{
	<script type="text/javascript" defer>
		const { createApp, nextTick } = Vue;

		const DELAY = 300;

		const _fetchCountries = _.debounce(async (self, search) => {
			self.errors.length = 0;
			self.loading = true;
			search = search && search.trim();
			
			try {
				const url = `@Url.Action("Countries", "Cities", new
							 {
								 area = "Admin"
							 }, Context.Request.Scheme)`;
				const params = new URLSearchParams({
					countryCode: self.countryCode,
					search: search ? encodeURIComponent(search) : ""
				});
				const response = await window.fetch(url + "?" + params);

				if (!response.ok) {
					const isJson = response.headers.get('content-type')?.includes('application/json');
					const data = isJson && await response.json();
					const error = (data && data.message) || response.status;
					throw error;
				}

				self.countries = await response.json();
			} catch (e) {
				self.selectedCountry = null;
				self.countries = [];
				alert(e.message || e);
			} finally {
				this.loading = false;
			}
		}, DELAY, { leading: true });

		createApp({
			data() {
				return {
					loading: false,
					selectedCountry: null,
					countryCode: "@Model.CountryCode",
					countries: [],
					errors: []
				}
			},
			watch: {
				selectedCountry(newValue) {
					if (newValue && newValue.id)
						this.countryCode = newValue.id;
					else
						this.countryCode = "";
				}
			},
			methods: {
				async fetchData() {
					await this.fetchCountries(null);
				},
				async fetchCountries(search) {
					_fetchCountries(this, search);
				}
			},
			mounted() {
				this.fetchData();
			}
		})
		.use(primevue.config.default)
		.component("autocomplete", primevue.autocomplete)
		.mount("#countryForm");
	</script>
}