@using HammadBroker.Model
@using Microsoft.AspNetCore.Http.Extensions
@model HammadBroker.Model.DTO.BuildingToUpdate

@{
	ViewData["Title"] = "تعديل عقار";
	int id = Context.Request.Query["id"].To(0);
}

<form asp-area="Admin" asp-controller="Buildings" asp-action="Edit" Method="post" enctype="multipart/form-data">
	<div id="buildingForm" v-scope class="card card-body mt-3">
		<div asp-validation-summary="ModelOnly"></div>
		<div class="text-danger" v-if="errors.length">
			<div v-for="error in errors">{{ error }}</div>
		</div>

		<input type="hidden" asp-route-id="@id" />
		<div class="card-deck2 align-items-stretch">
			<div class="card card-body">
				<img-asset name="ImageFile" src="@Model.ImageUrl" class="img-placeholder" imageclass="img-fluid d-block" />
				<input type="hidden" asp-for="ImageUrl" />
			</div>
			<div class="card card-body">
				<div class="drop-zone">
					<div :class="['zone-item', !uploading ? 'active' : '']">
						Drop zone is NOT shown
					</div>
					<div :class="['zone-item', uploading ? 'active' : '']">
						<fileupload name="imagesToAdd[]" url="@Url.Action("AddImage", "Buildings", new { area = "Admin", id, returnUrl = Context.Request.GetEncodedPathAndQuery() })"
									multiple accept="@Constants.Images.Extensions" :max-file-size="@Constants.Images.FileSizeMax" 
									v-on:select="onFilesSelected($event)" v-on:upload="onFilesUploaded($event)">
							<template #header="{ chooseCallback, uploadCallback, clearCallback, files }">
								<div class="d-flex flex-wrap justify-content-between align-items-center gap-2">
									<div class="d-flex gap-2">
										<p-button v-on:click="chooseCallback()" icon="pi pi-images" class="p-button-rounded"></p-button>
										<p-button v-on:click="uploadCallback()" icon="pi pi-cloud-upload" class="p-button-rounded p-button-success" :disabled="!files || files.length === 0"></p-button>
										<p-button v-on:click="clearCallback()" icon="pi pi-times" class="p-button-rounded p-button-danger" :disabled="!files || files.length === 0"></p-button>
									</div>
									<ProgressBar :value="totalSizePercent" :showValue="false" :class="['md:w-10rem h-1rem w-full md:mr-auto', {'exceeded-progress-bar': (totalSizePercent > 100)}]">
										<span class="white-space-nowrap">{{ totalSize }}B / 1Mb</span>
									</ProgressBar>
								</div>
							</template>
							<template #content="{ files, uploadedFiles, onUploadedFileRemove, onFileRemove }">
								<div v-if="files.length > 0">
									<h5>تحميل</h5>
									<div v-for="(file, index) of files" :key="file.name + file.type + file.size" class="card m-0 d-flex flex-column border-1 surface-border align-items-center">
										<div>
											<img role="presentation" :alt="file.name" :src="file.objectURL" height="50" class="shadow-2" />
										</div>
										<div class="text-truncate">{{ file.name }}</div>
										<div>{{ formatSize(file.size) }}</div>
										<p-button icon="pi pi-times" v-on:click="onRemoveFile(file, onFileRemove, index)" class="p-button-outlined p-button-danger p-button-rounded" />
									</div>
								</div>
								<div v-if="uploadedFiles.length > 0">
									<h5>إكتمل</h5>
									<div class="flex flex-wrap p-0 sm:p-5 gap-5">
										<div v-for="(file, index) of uploadedFiles" :key="file.name + file.type + file.size" class="card m-0 px-6 flex flex-column border-1 surface-border align-items-center gap-3">
											<div>
												<img role="presentation" :alt="file.name" :src="file.objectURL" width="100" class="shadow-2" />
											</div>
											<span class="font-semibold">{{ file.name }}</span>
											<div>{{ formatSize(file.size) }}</div>
											<Badge value="Completed" class="mt-3" severity="success" />
											<p-button icon="pi pi-times" v-on:click="onUploadedFileRemove(index)" class="p-button-outlined p-button-danger p-button-rounded" />
										</div>
									</div>
								</div>
							</template>
							<template #empty>
								<div class="flex align-items-center justify-content-center flex-column">
									<i class="pi pi-cloud-upload border-2 border-circle p-5 text-8xl text-400 border-400"></i>
									<p class="mt-4 mb-0">جر الملفات الى هنا للتحميل.</p>
								</div>
							</template>
						</fileupload>
					</div>
					<div class="d-flex justify-content-end w-100 position-absolute bottom-0 left-0 mb-2 px-3">
						<button type="button" class="btn btn-light btn-sm border-0" v-on:click="uploading = !uploading">
							<i v-if="!uploading" class="fa fa-cloud-arrow-up"></i>
							<i v-if="uploading" class="fa fa-image"></i>
						</button>
					</div>
				</div>
			</div>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Name" placeholder="@Html.DisplayNameFor(e => Model.Name)"/>
			<label class="form-label" asp-for="Name"></label>
			<span asp-validation-for="Name" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="VideoId" placeholder="@Html.DisplayNameFor(e => Model.VideoId)"/>
			<label class="form-label" asp-for="VideoId"></label>
			<span asp-validation-for="VideoId" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<select asp-for="BuildingType" class="form-select" asp-items="Html.GetEnumSelectList<BuildingType>()">
			</select>
			<label class="form-label" asp-for="BuildingType"></label>
			<span asp-validation-for="BuildingType" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<select asp-for="FinishingType" class="form-select" asp-items="Html.GetEnumSelectList<FinishingType>()">
				<option value=""></option>
			</select>
			<label class="form-label" asp-for="FinishingType"></label>
			<span asp-validation-for="FinishingType" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Floor" placeholder="@Html.DisplayNameFor(e => Model.Floor)"/>
			<label class="form-label" asp-for="Floor"></label>
			<span asp-validation-for="Floor" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Rooms" placeholder="@Html.DisplayNameFor(e => Model.Rooms)"/>
			<label class="form-label" asp-for="Rooms"></label>
			<span asp-validation-for="Rooms" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Bathrooms" placeholder="@Html.DisplayNameFor(e => Model.Bathrooms)" />
			<label class="form-label" asp-for="Bathrooms"></label>
			<span asp-validation-for="Bathrooms" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Area" placeholder="@Html.DisplayNameFor(e => Model.Area)"/>
			<label class="form-label" asp-for="Area"></label>
			<span asp-validation-for="Area" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Address" placeholder="@Html.DisplayNameFor(e => Model.Address)"/>
			<label class="form-label" asp-for="Address"></label>
			<span asp-validation-for="Address" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Address2" placeholder="@Html.DisplayNameFor(e => Model.Address2)"/>
			<label class="form-label" asp-for="Address2"></label>
			<span asp-validation-for="Address2" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input type="hidden" asp-for="CountryCode" :value="countryCode" />
			<autocomplete name="@nameof(Model.CountryCode)" class="w-100" input-class="w-100" :suggestions="countries"
						option-label="name" placeholder="البلد" :min-length="0" v-model="selectedCountry" data-key="id"
						v-on:complete="fetchCountries($event.query)" v-on:change="fetchCities($event.value)">
			</autocomplete>
			<span asp-validation-for="CountryCode" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input type="hidden" asp-for="CityId" :value="cityId" />
			<autocomplete name="@nameof(Model.CityId)" class="w-100" input-class="w-100" :suggestions="cities" option-label="name" placeholder="المدينة" 
						:min-length="0" v-model="selectedCity" data-key="id" v-on:complete="fetchCities(countryCode, $event.query)">
			</autocomplete>
			<span asp-validation-for="CityId" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<textarea class="form-control" asp-for="Description" rows="5" placeholder="@Html.DisplayNameFor(e => Model.Description)">
			</textarea>
			<label class="form-label" asp-for="Description"></label>
			<span asp-validation-for="Description" class="text-danger"></span>
		</div>
		<div class="my-1">
			<button type="submit" class="btn btn-primary">تعديل</button>
		</div>
	</div>
</form>

@section scripts
{
	<script type="text/javascript" defer>
		const { createApp, nextTick, ref } = Vue;
		const { useToast } = primevue.usetoast;

		const DELAY = 300;

		const _fetchCountries = _.debounce(async (self, search) => {
				self.errors.length = 0;
				self.loading = true;
				search = search && search.trim();

				try {
					const url = `@Url.Action("Countries", "Cities", new
					             {
						             area = "Admin"
					             }, Context.Request.Scheme)`;
					const params = new URLSearchParams({
						countryCode: self.countryCode,
						search: search ? encodeURIComponent(search) : ""
					});
					const response = await window.fetch(url + "?" + params);

					if (!response.ok) {
						const isJson = response.headers.get('content-type')?.includes('application/json');
						const data = isJson && await response.json();
						const error = (data && data.message) || response.status;
						throw error;
					}

					self.countries = await response.json();
				} catch (e) {
					self.selectedCountry = null;
					self.countries = [];
					alert(e.message || e);
				} finally {
					self.loading = false;
				}
			},
			DELAY,
			{ leading: true });
		const _fetchCities = _.debounce(async (self, countryCode, search) => {
				if (!countryCode) {
					self.selectedCity = null;
					self.cities = [];
					return;
				}

				self.loading = true;
				search = search && search.trim();

				try {
					const url = `@Url.Action("List", "Cities", new
					             {
						             area = "Admin"
					             }, Context.Request.Scheme)`;
					const params = new URLSearchParams({
						countryCode: self.countryCode,
						search: search ? encodeURIComponent(search) : ""
					});
					const response = await window.fetch(url + "?" + params);

					if (!response.ok) {
						const isJson = response.headers.get('content-type')?.includes('application/json');
						const data = isJson && await response.json();
						const error = (data && data.message) || response.status;
						throw error;
					}

					self.cities = await response.json();
				} catch (e) {
					self.selectedCity = null;
					self.cities = [];
					alert(e.message || e);
				} finally {
					self.loading = false;
				}
			},
			DELAY,
			{ leading: true });

		createApp({
				data() {
					return {
						loading: false,
						selectedCountry: null,
						countryCode: "@Model.CountryCode",
						countries: [],
						selectedCity: null,
						cityId: @Model.CityId,
						cities: [],
						uploading: false,
						uploadedFile: [],
						files: [],
						totalSize: 0,
						totalSizePercent: 0,
						toast: useToast(),
						errors: []
					}
				},
				watch: {
					selectedCountry(newValue) {
						if (newValue && newValue.id)
							this.countryCode = newValue.id;
						else
							this.countryCode = "";
					},
					selectedCity(newValue) {
						if (newValue && newValue.id)
							this.cityId = newValue.id;
						else
							this.cityId = 0;
					}
				},
				methods: {
					fetchData() {
						this.errors.length = 0;
						this.fetchCountries();
						this.fetchCities(this.countryCode);
					},
					fetchCountries(search) {
						_fetchCountries(this, search);
					},
					fetchCities(countryCode, search) {
						_fetchCities(this, countryCode, search);
					},
					onRemoveFile(file, fileRemoveCallback, index) {
						fileRemoveCallback(index);
						this.totalSize -= parseInt(this.formatSize(file.size));
						this.totalSizePercent = this.totalSize / 10.0;
					},
					onClearUpload(clear) {
						clear();
						this.totalSize = 0;
						this.totalSizePercent = 0;
					},
					onFilesSelected(event) {
						this.files = event.files;
						this.files.forEach((file) => {
							this.totalSize += parseInt(this.formatSize(file.size));
						});
					},
					onAdvancedUpload() {
						this.$toast.add({ severity: 'info', summary: 'تم بنجاح', detail: 'اكتمل تحميل الملف', life: 3000 });
					},
					uploadEvent(callback) {
						this.totalSizePercent = this.totalSize / 10;
						callback();
					},
					onUpload() {
						this.totalSize = 0;
						this.totalSizePercent = 0;
						this.$toast.add({ severity: 'info', summary: 'تم بنجاح', detail: 'اكتمل تحميل الملف', life: 3000 });
					},
					formatSize(bytes) {
						if (bytes === 0) return '0 B';

						const k = 1000;
						const dm = 3;
						const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
						const i = Math.floor(Math.log(bytes) / Math.log(k));

						return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
					}
				},
				mounted() {
					this.fetchData();
				}
			})
			.use(primevue.config.default)
			.use(primevue.toastservice)
			.component("autocomplete", primevue.autocomplete)
			.component("fileupload", primevue.fileupload)
			.component("p-button", primevue.button)
			.component("badge", primevue.badge)
			.component("progressbar", primevue.progressbar)
			.component("toast", primevue.toast)
			.mount("#buildingForm");
	</script>
}