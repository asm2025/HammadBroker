@using Microsoft.AspNetCore.Antiforgery
@using HammadBroker.Model
@inject IAntiforgery Antiforgery
@model HammadBroker.Model.DTO.BuildingToUpdate

@{
	ViewData["Title"] = "تعديل عقار";
	int id = Context.Request.RouteValues["id"].To(0);
}

<form asp-area="Admin" asp-controller="Buildings" asp-action="Edit" Method="post" enctype="multipart/form-data">
	<div id="buildingForm" v-scope class="card card-body mt-3">
		<div asp-validation-summary="ModelOnly"></div>
		<div v-if="errors && errors.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="error of errors">
			{{ error }}
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>

		<input type="hidden" asp-route-id="@id" />
		<div class="card-deck2">
			<div class="card card-body">
				<img-asset name="Image" src="@Model.ImageUrl" class="img-placeholder" imageclass="img-fluid d-block" />
				<input type="hidden" asp-for="ImageUrl" />
			</div>
			<div class="card card-body">
				<div class="drop-zone">
					<div :class="['zone-item', !uploading ? 'active' : '']" dir="ltr">
						<galleria ref="galleria" :value="images" v-model:active-index="activeImage" :num-visible="5" :show-thumbnails="showThumbnails" 
								:container-class="galleriaClass" show-item-navigators show-item-navigators-on-hover circular auto-play :transition-interval="3000">
							<template #item="{ item }">
								<img :src="item" alt="" class="img-fluid" v-on:click="toggleFullScreen"/>
							</template>
							<template #thumbnail="{ item }">
								<div class="grid grid-nogutter justify-content-center">
									<img :src="item" alt="" class="img-fluid" />
								</div>
							</template>
						</galleria>
					</div>
					<div :class="['zone-item', uploading ? 'active' : '']">
						<fileupload accept="@Constants.Images.Extensions" multiple :file-limit="10" :max-file-size="@Constants.Images.FileSizeMax" 
									:custom-upload="true" v-on:select="onFilesSelected" v-on:uploader="onUpload" v-on:upload="onFilesUploaded" v-on:error="onError">
							<template #header="{ chooseCallback, uploadCallback, clearCallback, files }">
								<div class="w-100 d-flex flex-wrap align-items-center gap-2">
									<div class="d-flex flex-grow-1 gap-2">
										<button type="button" class="btn btn-outline-secondary btn-sm" title="اختيار ملفات" v-on:click="chooseCallback()"><i class="fa fa-images"></i></button>
										<button v-if="files && files.length" type="button" class="btn btn-outline-secondary btn-sm" title="تحميل" v-on:click="uploadCallback()"><i class="fa fa-cloud-upload"></i></button>
										<button v-if="files && files.length" type="button" class="btn btn-outline-secondary btn-sm" title="حذف" v-on:click="clearCallback()"><i class="fa fa-times"></i></button>
									</div>
									<ProgressBar v-show="uploadProgress > 0" :value="uploadProgress" :show-value="false" :class="['md:w-10rem h-1rem w-full md:mr-auto', {'exceeded-progress-bar': (uploadProgress > 100)}]">
									</ProgressBar>
								</div>
							</template>
							<template #content="{ files, uploadedFiles, messages, onUploadedFileRemove, onFileRemove }">
								<div v-if="messages && messages.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="message of messages">
									{{ message }}
									<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
								</div>
								<div v-if="files && files.length > 0">
									<h5>التحميل</h5>
									<div v-for="(file, index) of files" :key="file.name + file.type + file.size" class="card m-0">
										<span class="position-absolute top-0 start-0 border border-light p-1 m-1 badge rounded-pill text-bg-warning"><span class="visually-hidden">في انتظار التحميل</span></span>
										<img class="card-img-top" role="presentation" :alt="file.name" :src="file.objectURL" />
										<div class="card-body">
											<div class="card-title text-truncate">{{ file.name }}</div>
											<div class="d-flex align-items-center">
												<div class="card-text flex-grow-1">{{ formatSize(file.size) }}</div>
												<button type="button" class="btn btn-outline-danger btn-sm" v-on:click="onRemoveFile(file, onFileRemove, index)"><i class="fa fa-times"></i></button>
											</div>
										</div>
									</div>
								</div>
								<div v-if="uploadedFiles && uploadedFiles.length > 0">
									<h5>إكتمل</h5>
									<div v-for="(file, index) of uploadedFiles" :key="file.name + file.type + file.size" class="card m-0">
										<span class="position-absolute top-0 start-0 border border-light p-1 m-1 badge rounded-pill text-bg-success"><span class="visually-hidden">في انتظار التحميل</span></span>
										<img class="card-img-top" role="presentation" :alt="file.name" :src="file.objectURL" />
										<div class="card-body">
											<div class="card-title text-truncate">{{ file.name }}</div>
											<div class="d-flex align-items-center">
												<div class="card-text flex-grow-1">{{ formatSize(file.size) }}</div>
												<button type="button" class="btn btn-outline-danger btn-sm" v-on:click="onUploadedFileRemove(index)"><i class="fa fa-times"></i></button>
											</div>
										</div>
									</div>
								</div>
							</template>
							<template #empty>
								<div class="d-flex align-items-center justify-content-center flex-column">
									<i class="fa fa-cloud-upload border-2 border-circle p-5 text-6xl text-200 border-200"></i>
									<p class="mt-4 mb-0">اسحب الملفات الى هنا للتحميل.</p>
								</div>
							</template>
						</fileupload>
					</div>
					<div class="d-flex justify-content-end w-100 position-absolute bottom-0 left-0 mb-2 px-3 banner-light30">
						<button type="button" class="btn btn-light btn-sm border-0 me-1" v-on:click="uploading = !uploading">
							<i :class="['fa', uploading ? 'fa-image' : 'fa-cloud-arrow-up']"></i>
						</button>
						<div v-if="!uploading && images && images.length" class="flex-grow-1 d-flex">
							<button type="button" class="btn btn-light btn-sm border-0 me-1" v-on:click="showThumbnails = !showThumbnails">
								<i class="fa fa-list"></i>
							</button>
							<div class="flex-grow-1 px-2">{{ activeImage + 1 }}/{{ images.length }}</div>
							<button type="button" class="btn btn-light btn-sm border-0 me-1" v-on:click="toggleFullScreen">
								<i :class="['fa', fullScreen ? 'fa-window-minimize' : 'fa-window-maximize']"></i>
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Name" placeholder="@Html.DisplayNameFor(e => Model.Name)"/>
			<label class="form-label" asp-for="Name"></label>
			<span asp-validation-for="Name" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="VideoId" placeholder="@Html.DisplayNameFor(e => Model.VideoId)"/>
			<label class="form-label" asp-for="VideoId"></label>
			<span asp-validation-for="VideoId" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<select asp-for="BuildingType" class="form-select" asp-items="Html.GetEnumSelectList<BuildingType>()">
			</select>
			<label class="form-label" asp-for="BuildingType"></label>
			<span asp-validation-for="BuildingType" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<select asp-for="FinishingType" class="form-select" asp-items="Html.GetEnumSelectList<FinishingType>()">
				<option value=""></option>
			</select>
			<label class="form-label" asp-for="FinishingType"></label>
			<span asp-validation-for="FinishingType" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Floor" placeholder="@Html.DisplayNameFor(e => Model.Floor)"/>
			<label class="form-label" asp-for="Floor"></label>
			<span asp-validation-for="Floor" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Rooms" placeholder="@Html.DisplayNameFor(e => Model.Rooms)"/>
			<label class="form-label" asp-for="Rooms"></label>
			<span asp-validation-for="Rooms" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Bathrooms" placeholder="@Html.DisplayNameFor(e => Model.Bathrooms)" />
			<label class="form-label" asp-for="Bathrooms"></label>
			<span asp-validation-for="Bathrooms" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Area" placeholder="@Html.DisplayNameFor(e => Model.Area)"/>
			<label class="form-label" asp-for="Area"></label>
			<span asp-validation-for="Area" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Address" placeholder="@Html.DisplayNameFor(e => Model.Address)"/>
			<label class="form-label" asp-for="Address"></label>
			<span asp-validation-for="Address" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Address2" placeholder="@Html.DisplayNameFor(e => Model.Address2)"/>
			<label class="form-label" asp-for="Address2"></label>
			<span asp-validation-for="Address2" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input type="hidden" asp-for="CountryCode" :value="countryCode" />
			<autocomplete name="@nameof(Model.CountryCode)" class="w-100" input-class="w-100" :suggestions="countries"
						option-label="name" placeholder="البلد" :min-length="0" v-model="selectedCountry" data-key="id"
						v-on:complete="fetchCountries($event.query)" v-on:change="fetchCities($event.value)">
			</autocomplete>
			<span asp-validation-for="CountryCode" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input type="hidden" asp-for="CityId" :value="cityId" />
			<autocomplete name="@nameof(Model.CityId)" class="w-100" input-class="w-100" :suggestions="cities" option-label="name" placeholder="المدينة" 
						:min-length="0" v-model="selectedCity" data-key="id" v-on:complete="fetchCities(countryCode, $event.query)">
			</autocomplete>
			<span asp-validation-for="CityId" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<textarea class="form-control" asp-for="Description" rows="5" placeholder="@Html.DisplayNameFor(e => Model.Description)">
			</textarea>
			<label class="form-label" asp-for="Description"></label>
			<span asp-validation-for="Description" class="text-danger"></span>
		</div>
		<div class="my-1">
			<button type="submit" class="btn btn-primary">تعديل</button>
		</div>
	</div>
</form>

@section scripts
{
	<script type="text/javascript" defer>
		const { createApp, nextTick, ref } = Vue;
		const { useToast } = primevue.usetoast;

		const DELAY = 300;

		const _FILE_SIZES = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
		const _formatSize = (bytes) => {
			if (!bytes) return '0 B';

			const k = 1000;
			const dm = 3;
			const i = Math.floor(Math.log(bytes) / Math.log(k));

			return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + _FILE_SIZES[i];
		};

		const _fetchCountries = _.debounce(async (self, search) => {
				self.errors.length = 0;
				self.loading = true;
				search = search && search.trim();

				try {
					const url = `@Url.Action("Countries", "Cities", new
					             {
						             area = "Admin"
					             }, Context.Request.Scheme)`;
					const params = new URLSearchParams({
						countryCode: self.countryCode,
						search: search ? encodeURIComponent(search) : ""
					});
					const response = await window.fetch(url + "?" + params);

					if (!response.ok) {
						const isJson = response.headers.get('content-type')?.includes('application/json');
						const data = isJson && await response.json();
						const error = (data && data.message) || response.status;
						throw error;
					}

					self.countries = await response.json();
				} catch (e) {
					self.selectedCountry = null;
					self.countries = [];
					alert(e.message || e);
				} finally {
					self.loading = false;
				}
			},
			DELAY,
			{ leading: true });
		const _fetchCities = _.debounce(async (self, countryCode, search) => {
				if (!countryCode) {
					self.selectedCity = null;
					self.cities = [];
					return;
				}

				self.loading = true;
				search = search && search.trim();

				try {
					const url = `@Url.Action("List", "Cities", new
					             {
						             area = "Admin"
					             }, Context.Request.Scheme)`;
					const params = new URLSearchParams({
						countryCode: self.countryCode,
						search: search ? encodeURIComponent(search) : ""
					});
					const response = await window.fetch(url + "?" + params);

					if (!response.ok) {
						const isJson = response.headers.get('content-type')?.includes('application/json');
						const data = isJson && await response.json();
						const error = (data && data.message) || response.status;
						throw error;
					}

					self.cities = await response.json();
				} catch (e) {
					self.selectedCity = null;
					self.cities = [];
					alert(e.message || e);
				} finally {
					self.loading = false;
				}
			}, DELAY, { leading: true });

		createApp({
			data() {
				return {
					loading: false,
					selectedCountry: null,
					countryCode: "@Model.CountryCode",
					countries: [],
					selectedCity: null,
					cityId: @Model.CityId,
					cities: [],
					fullScreen: false,
					showThumbnails: false,
					activeImage: 0,
					images: [],
					uploading: false,
					files: [],
					uploadedFiles: [],
					uploadedSize: 0,
					totalSize: 0,
					uploadProgress: 0,
					toast: useToast(),
					errors: []
				}
			},
			computed: {
				galleriaClass() {
					return ['galleria', {'fullscreen': this.fullScreen}];
				}
			},
			watch: {
				selectedCountry(newValue) {
					if (newValue && newValue.id)
						this.countryCode = newValue.id;
					else
						this.countryCode = "";
				},
				selectedCity(newValue) {
					if (newValue && newValue.id)
						this.cityId = newValue.id;
					else
						this.cityId = 0;
				}
			},
			methods: {
				async fetchData() {
					this.errors.length = 0;
					this.fetchCountries();
					this.fetchCities(this.countryCode);
					await this.fetchImages();
				},
				fetchCountries(search) {
					_fetchCountries(this, search);
				},
				fetchCities(countryCode, search) {
					_fetchCities(this, countryCode, search);
				},
				async fetchImages() {
					this.errors.length = 0;
					this.activeImage = 0;
					this.loading = true;

					try {
						const url = `@Url.Action("ListImages", "Buildings", new
					             {
						             area = "Admin",
									 id
					             }, Context.Request.Scheme)`;
						const response = await window.fetch(url);

						if (!response.ok) {
							const isJson = response.headers.get('content-type')?.includes('application/json');
							const data = isJson && await response.json();
							const error = (data && data.message) || response.status;
							throw error;
						}

						this.images = await response.json();
					} catch (e) {
						this.images = [];
						alert(e.message || e);
					} finally {
						this.loading = false;
					}
				},
				onFilesSelected(event) {
					this.uploadedSize = 0;
					this.files = event.files;

					let totalSize = 0;
					this.files.forEach((file) => {
						totalSize += file.size;
					});
					this.totalSize = totalSize;
					this.updateProgress();
				},
				onRemoveFile(file, fileRemoveCallback, index) {
					fileRemoveCallback(index);
					this.totalSize -= file.size;
				},
				onClearUpload(clear) {
					clear();
					this.uploadedSize = 0;
					this.totalSize = 0;
					this.updateProgress();
				},
				async onUpload(event) {
					this.errors.length = 0;
					this.uploadedSize = 0;
					this.uploadProgress = 0;

					const url = "@Url.Action("AddImage", "Buildings", new
						            {
							            area = "Admin",
							            id
						            })";
					const files = event.files;

					for (const file of files) {
						const formData = new FormData();
						formData.append("imageToAdd.image", file);

						try {
							const response = await fetch(url,
								{
									method: "post",
									body: formData,
									headers: {
										RequestVerificationToken: "@Antiforgery.GetAndStoreTokens(Context).RequestToken"
									},
									credentials: "same-origin"
								});

							if (!response.ok) {
								const isJson = response.headers.get('content-type')?.includes('application/json');
								const data = isJson && await response.json();
								const error = (data && data.message) || response.status;
								throw error;
							}

							this.uploadedFiles = [...this.uploadedFiles, file];
						} catch (e) {
							const error = e.message || e;
							this.errors.push(error);
						} finally {
							this.uploadedSize += file.size;
							this.updateProgress();
						}
					}

					if (this.errors.length) return;
					this.uploading = false;
					await this.fetchImages();
				},
				onFilesUploaded(event) {
					this.uploadedFiles = event.files;
					this.uploadedSize = 0;
					this.totalSize = 0;
					this.updateProgress();
					this.$toast.add({ severity: 'info', summary: 'تم بنجاح', detail: 'اكتمل تحميل الملف', life: 3000 });
				},
				onError(event) {
					if (event.files && event.files.length) {
						for (const file of event.files) {
							this.errors.push("حدث خطأ أثناء تحميل الملف: " + file.name);
						}
					} else {
						this.errors.push("حدث خطأ أثناء التحميل.");
					}
				},
				updateProgress() {
					if (!this.totalSize || !this.uploadedSize) {
						this.uploadProgress = 0;
						return;
					}

					this.uploadProgress = Math.ceil((this.uploadedSize / parseFloat(this.totalSize)) * 100);
				},
				formatSize(bytes) {
					_formatSize(bytes);
				},
				toggleFullScreen() {
					if (this.fullScreen) {
						this.closeFullScreen();
					}
					else {
						this.openFullScreen();
					}
				},
				onFullScreenChange() {
					this.fullScreen = !this.fullScreen;
				},
				openFullScreen() {
					let elem = this.$refs.galleria.$el;
					if (elem.requestFullscreen) {
						elem.requestFullscreen();
					}
					else if (elem.mozRequestFullScreen) { /* Firefox */
						elem.mozRequestFullScreen();
					}
					else if (elem.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
						elem.webkitRequestFullscreen();
					}
					else if (elem.msRequestFullscreen) { /* IE/Edge */
						elem.msRequestFullscreen();
					}
				},
				closeFullScreen() {
					if (document.exitFullscreen) {
						document.exitFullscreen();
					}
					else if (document.mozCancelFullScreen) {
						document.mozCancelFullScreen();
					}
					else if (document.webkitExitFullscreen) {
						document.webkitExitFullscreen();
					}
					else if (document.msExitFullscreen) {
						document.msExitFullscreen();
					}
				},
				bindDocumentListeners() {
					document.addEventListener("fullscreenchange", this.onFullScreenChange);
					document.addEventListener("mozfullscreenchange", this.onFullScreenChange);
					document.addEventListener("webkitfullscreenchange", this.onFullScreenChange);
					document.addEventListener("msfullscreenchange", this.onFullScreenChange);
				},
				unbindDocumentListeners() {
					document.removeEventListener("fullscreenchange", this.onFullScreenChange);
					document.removeEventListener("mozfullscreenchange", this.onFullScreenChange);
					document.removeEventListener("webkitfullscreenchange", this.onFullScreenChange);
					document.removeEventListener("msfullscreenchange", this.onFullScreenChange);
				}
			},
			mounted() {
				this.bindDocumentListeners();
				this.fetchData();
			},
			unmounted() {
				this.unbindDocumentListeners();
			}
		})
		.use(primevue.config.default)
		.use(primevue.toastservice)
		.component("autocomplete", primevue.autocomplete)
		.component("galleria", primevue.galleria)
		.component("fileupload", primevue.fileupload)
		.component("progressbar", primevue.progressbar)
		.component("toast", primevue.toast)
		.mount("#buildingForm");
	</script>
}