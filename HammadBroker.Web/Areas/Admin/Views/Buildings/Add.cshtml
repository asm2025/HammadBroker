@using HammadBroker.Model
@model HammadBroker.Model.DTO.BuildingToUpdate

@{
	ViewData["Title"] = "إضافة عقار";
}

<form asp-area="Admin" asp-controller="Buildings" asp-action="Add" Method="post" enctype="multipart/form-data">
	<div id="buildingForm" v-scope class="card card-body mt-3">
		<div asp-validation-summary="ModelOnly"></div>
		<div v-if="errors && errors.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="error of errors">
			{{ error }}
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>

		<img-asset name="Image" src="@Model.ImageUrl" class="img-placeholder mx-auto" imageclass="img-fluid mx-auto d-block" />
		<input type="hidden" asp-for="ImageUrl" />
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Name" placeholder="@Html.DisplayNameFor(e => Model.Name)" />
			<label class="form-label" asp-for="Name"></label>
			<span asp-validation-for="Name" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="VideoId" placeholder="@Html.DisplayNameFor(e => Model.VideoId)" />
			<label class="form-label" asp-for="VideoId"></label>
			<span asp-validation-for="VideoId" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<select asp-for="BuildingType" class="form-select" asp-items="Html.GetEnumSelectList<BuildingType>()">
			</select>
			<label class="form-label" asp-for="BuildingType"></label>
			<span asp-validation-for="BuildingType" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<select asp-for="FinishingType" class="form-select" asp-items="Html.GetEnumSelectList<FinishingType>()">
				<option value=""></option>
			</select>
			<label class="form-label" asp-for="FinishingType"></label>
			<span asp-validation-for="FinishingType" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Floor" placeholder="@Html.DisplayNameFor(e => Model.Floor)" />
			<label class="form-label" asp-for="Floor"></label>
			<span asp-validation-for="Floor" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Rooms" placeholder="@Html.DisplayNameFor(e => Model.Rooms)" />
			<label class="form-label" asp-for="Rooms"></label>
			<span asp-validation-for="Rooms" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Bathrooms" placeholder="@Html.DisplayNameFor(e => Model.Bathrooms)" />
			<label class="form-label" asp-for="Bathrooms"></label>
			<span asp-validation-for="Bathrooms" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Area" placeholder="@Html.DisplayNameFor(e => Model.Area)" />
			<label class="form-label" asp-for="Area"></label>
			<span asp-validation-for="Area" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Address" placeholder="@Html.DisplayNameFor(e => Model.Address)" />
			<label class="form-label" asp-for="Address"></label>
			<span asp-validation-for="Address" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input class="form-control" asp-for="Address2" placeholder="@Html.DisplayNameFor(e => Model.Address2)" />
			<label class="form-label" asp-for="Address2"></label>
			<span asp-validation-for="Address2" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input type="hidden" asp-for="CountryCode" :value="countryCode" />
			<autocomplete class="w-100" input-class="w-100" :suggestions="countries"
						option-label="name" placeholder="البلد" :min-length="0" v-model="selectedCountry" data-key="id" force-selection
						v-on:complete="fetchCountries($event.query)" v-on:change="fetchCities($event.value)">
			</autocomplete>
			<span asp-validation-for="CountryCode" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<input type="hidden" asp-for="CityId" :value="cityId" />
			<autocomplete name="@nameof(Model.CityId)" class="w-100" input-class="w-100" :suggestions="cities" option-label="name" placeholder="المدينة"
						:min-length="0" v-model="selectedCity" data-key="id" force-selection v-on:complete="fetchCities(countryCode, $event.query)">
			</autocomplete>
			<span asp-validation-for="CityId" class="text-danger"></span>
		</div>
		<div class="form-floating mb-1">
			<textarea class="form-control" asp-for="Description" rows="5" placeholder="@Html.DisplayNameFor(e => Model.Description)">
			</textarea>
			<label class="form-label" asp-for="Description"></label>
			<span asp-validation-for="Description" class="text-danger"></span>
		</div>
		<div class="my-1">
			<button type="submit" class="btn btn-primary">إضافة</button>
		</div>
	</div>
</form>

@section scripts
{
	<script type="text/javascript" defer>
		const { createApp, nextTick } = Vue;

		const DELAY = 300;

		const _fetchCountries = _.debounce(async (self, search) => {
			self.errors.length = 0;
			self.loading = true;
			search = search && search.trim();
			
			try {
				const url = `@Url.Action("Countries", "Cities", new
							 {
								 area = "Admin"
							 }, Context.Request.Scheme)`;
				const params = new URLSearchParams({
					countryCode: self.countryCode,
					search: search ? encodeURIComponent(search) : ""
				});
				const response = await window.fetch(url + "?" + params);

				if (!response.ok) {
					const isJson = response.headers.get('content-type')?.includes('application/json');
					const data = isJson && await response.json();
					const error = (data && data.message) || response.status;
					throw error;
				}

				self.countries = await response.json();
			} catch (e) {
				self.selectedCountry = null;
				self.countries = [];
				alert(e.message || e);
			} finally {
				self.loading = false;
			}
		}, DELAY, { leading: true });
		const _fetchCities = _.debounce(async (self, countryCode, search) => {
			if (!countryCode) {
				self.selectedCity = null;
				self.cities = [];
				return;
			}

			self.loading = true;
			search = search && search.trim();

			try {
				const url = `@Url.Action("List", "Cities", new
							             {
								             area = "Admin"
							             }, Context.Request.Scheme)`;
				const params = new URLSearchParams({
					countryCode: self.countryCode,
					search: search ? encodeURIComponent(search) : ""
				});
				const response = await window.fetch(url + "?" + params);

				if (!response.ok) {
					const isJson = response.headers.get('content-type')?.includes('application/json');
					const data = isJson && await response.json();
					const error = (data && data.message) || response.status;
					throw error;
				}

				self.cities = await response.json();
			} catch (e) {
				self.selectedCity = null;
				self.cities = [];
				alert(e.message || e);
			} finally {
				self.loading = false;
			}
		}, DELAY, { leading: true });

		createApp({
				data() {
					return {
						loading: false,
						selectedCountry: null,
						countryCode: "@Model.CountryCode",
						countries: [],
						selectedCity: null,
						cityId: @Model.CityId,
						cities: [],
						errors: []
					}
				},
				watch: {
					selectedCountry(newValue) {
						if (newValue && newValue.id)
							this.countryCode = newValue.id;
						else
							this.countryCode = "";
					},
					selectedCity(newValue) {
						if (newValue && newValue.id)
							this.cityId = newValue.id;
						else
							this.cityId = 0;
					}
				},
				methods: {
					fetchData() {
						this.errors.length = 0;
						this.fetchCountries();
						this.fetchCities(this.countryCode);
					},
					fetchCountries(search) {
						_fetchCountries(this, search);
					},
					fetchCities(countryCode, search) {
						_fetchCities(this, countryCode, search);
					}
				},
				mounted() {
					this.fetchData();
				}
			})
			.use(primevue.config.default)
			.component("autocomplete", primevue.autocomplete)
			.mount("#buildingForm");
	</script>
}
