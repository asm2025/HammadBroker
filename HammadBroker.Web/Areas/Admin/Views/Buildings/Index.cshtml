@using HammadBroker.Model.DTO
@using HammadBroker.Model
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authorization
@inject IAntiforgery Antiforgery
@inject IAuthorizationService AuthorizationService
@model BuildingsPaginated<BuildingForList>
@{
	ViewData["Title"] = "الاعلانات";
	bool isAdmin = (await AuthorizationService.AuthorizeAsync(User, Constants.Authorization.AdministrationPolicy)).Succeeded;
	bool hasSearch = Model.Pagination.HasSearch;
}

@if (Model.Pagination.Count > Model.Pagination.PageSize || hasSearch)
{
	<div class="card mb-1">
		<h5 class="card-header @(hasSearch ? null : "collapsed")" data-bs-toggle="collapse" data-bs-target="#searchForm" 
		aria-expanded="@(hasSearch ? "true" : "false")" aria-controls="searchForm">البحث</h5>
		<div id="searchForm" v-scope class="card-body @(hasSearch ? null : "collapse")">
			<form method="get" asp-area="Admin" asp-controller="Buildings" asp-action="Index">
				<div v-if="errors && errors.length" :class="['alert', 'alert-danger', 'alert-dismissible', 'fade', 'show']" role="alert" v-for="error of errors">
					{{ error }}
					<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
				</div>

				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-4">
						<label asp-for="Pagination.Id" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Id)" asp-for="Pagination.Id" />
					</div>
					<div class="col-sm-12 col-md-4">
						<label asp-for="Pagination.BuildingType" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.BuildingType)" asp-for="Pagination.BuildingType" asp-items="Html.GetEnumSelectList<BuildingType>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.BuildingType)</option>
						</select>
					</div>
					<div class="col-sm-12 col-md-4">
						<label asp-for="Pagination.FinishingType" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.FinishingType)" asp-for="Pagination.FinishingType" asp-items="Html.GetEnumSelectList<FinishingType>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.FinishingType)</option>
						</select>
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-6">
						<label asp-for="Pagination.AdType" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.AdType)" asp-for="Pagination.AdType" asp-items="Html.GetEnumSelectList<BuildingAdType>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.AdType)</option>
						</select>
					</div>
					<div class="col-sm-12 col-md-6">
						<label asp-for="Pagination.Date" class="form-label"></label>
						<input type="hidden" name="@nameof(Model.Pagination.Date)" :value="date"/>
						<input type="hidden" name="@nameof(Model.Pagination.MaxDate)" :value="maxDate"/>
						<calendar class="w-100" v-model="dateRange" selection-mode="range" date-format="yy/mm/dd">
						</calendar>
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-8">
						<label asp-for="Pagination.Address" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Address)" asp-for="Pagination.Address" />
					</div>
					<div class="col-sm-12 col-md-4">
						<label asp-for="Pagination.CityId" class="form-label"></label>
						<input type="hidden" name="@nameof(Model.Pagination.CityId)" asp-for="Pagination.CityId" :value="cityId" />
						<autocomplete class="w-100" input-class="w-100" :suggestions="cities" option-label="name"
						v-model="selectedCity" data-key="id" dropdown v-on:complete="fetchCities($event.query)">
						</autocomplete>
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.Rooms" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Rooms)" asp-for="Pagination.Rooms" />
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.MaxRooms" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.MaxRooms)" asp-for="Pagination.MaxRooms" />
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.Bathrooms" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Bathrooms)" asp-for="Pagination.Bathrooms" />
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.MaxBathrooms" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.MaxBathrooms)" asp-for="Pagination.MaxBathrooms" />
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.Floor" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.Floor)" asp-for="Pagination.Floor" asp-items="Html.GetEnumSelectList<Floors>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.Floor)</option>
						</select>
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.MaxFloor" class="form-label"></label>
						<select class="form-select" name="@nameof(Model.Pagination.MaxFloor)" asp-for="Pagination.MaxFloor" asp-items="Html.GetEnumSelectList<Floors>()">
							<option value="">@Html.DisplayNameFor(e => e.Pagination.Floor)</option>
						</select>
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.Area" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Area)" asp-for="Pagination.Area" />
					</div>
					<div class="col-sm-12 col-md-3">
						<label asp-for="Pagination.MaxArea" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.MaxArea)" asp-for="Pagination.MaxArea" />
					</div>
				</div>
				<div class="row g-0 mb-1">
					<div class="col-sm-12 col-md-6">
						<label asp-for="Pagination.Price" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.Price)" asp-for="Pagination.Price" />
					</div>
					<div class="col-sm-12 col-md-6">
						<label asp-for="Pagination.MaxPrice" class="form-label"></label>
						<input class="form-control" name="@nameof(Model.Pagination.MaxPrice)" asp-for="Pagination.MaxPrice" />
					</div>
				</div>
				<div class="row g-0 px-2 my-1">
					<button type="submit" class="btn btn-outline-secondary btn-sm me-1"><span class="fa fa-magnifying-glass"></span></button>
					<button type="reset" class="btn btn-outline-secondary btn-sm border-0" v-on:click="onReset"><span class="fa fa-times"></span></button>
				</div>
			</form>
		</div>
	</div>
}

<div class="row mb-1">
	<div class="col-12">
		<a asp-area="Admin" asp-controller="Buildings" asp-action="Add" class="btn btn-outline-primary border-0"><i class="fa fa-plus"></i> إضافة عقار</a>
	</div>
</div>

<div class="table-responsive">
	<table class="table table-borderless table-hover">
		<thead>
			<tr>
				@if (isAdmin)
				{
					<th scope="col" class="auto-cell"></th>
				}
				<th scope="col" class="auto-cell"></th>
				<th scope="col" class="auto-cell">@Html.DisplayNameForInnerType((BuildingForList e) => e.Id)</th>
				<th scope="col" class="auto-cell">@Html.DisplayNameForInnerType((BuildingForList e) => e.Date)</th>
				<th scope="col" class="text-nowrap">@Html.DisplayNameForInnerType((BuildingForList e) => e.BuildingType)</th>
				<th scope="col" class="text-nowrap">@Html.DisplayNameForInnerType((BuildingForList e) => e.AdType)</th>
				<th scope="col" class="text-nowrap auto-cell">@Html.DisplayNameForInnerType((BuildingForList e) => e.FinishingType)</th>
				<th scope="col" class="text-center auto-cell">@Html.DisplayNameForInnerType((BuildingForList e) => e.Price)</th>
			</tr>
		</thead>
		<tbody>
			@foreach (BuildingForList building in Model.Result)
			{
				<tr role="button" onclick="window.location = '@Url.Action("Get", "Buildings", new { area = "Admin", id = building.Id })'">
					@if (isAdmin)
					{
						<th scope="row" class="text-nowrap">
							<a class="btn btn-outline-secondary btn-sm border-0 mb-1" asp-area="Admin" asp-controller="Buildings" asp-action="Edit" asp-route-id="@building.Id" title="تعديل"><i class="fa fa-pen"></i></a>
							<a class="btn btn-outline-danger btn-sm border-0 mb-1" onclick="JavaScript:deleteBuilding(event, '@building.Id');" title="حذف العقار"><i class="fa fa-xmark"></i></a>
						</th>
					}
					<td>
						<img-asset src="@building.ImageUrl" readonly imageclass="img-fluid img-list mx-auto d-block" />
					</td>
					<td>@Html.DisplayFor(e => building.Id)</td>
					<td class="text-nowrap">@Html.DisplayFor(e => building.Date)</td>
					<td class="text-nowrap">@Html.DisplayFor(e => building.BuildingTypeName)</td>
					<td class="text-nowrap">@Html.DisplayFor(e => building.AdTypeName)</td>
					<td class="text-nowrap">@Html.DisplayFor(e => building.FinishingTypeName)</td>
					<td class="text-nowrap">@Html.DisplayFor(e => building.Price)</td>
				</tr>
			}
		</tbody>
	</table>
</div>
<partial name="_PaginationPartial" model="Model.Pagination" />

@section scripts
{
	<script type="text/javascript">
		async function deleteBuilding(evt, id) {
			evt.stopPropagation();
			if (!confirm(`هل تريد حذف العقار '${id}'؟`)) return;

			try
			{
				const url = '@Url.Action("Delete", "Buildings", new
				             {
					             area = "Admin"
				             })';
				const data = new FormData();
				data.append("id", id);
				await fetch(url, {
					method: "post",
					body: data,
					headers: {
						RequestVerificationToken: "@Antiforgery.GetAndStoreTokens(Context).RequestToken"
					},
					credentials: "same-origin"
				});
				window.location.reload();
			}
			catch (ex)
			{
				alert(ex.message || ex);
			}
		}
	</script>
	<script type="text/javascript" defer>
		const { createApp, nextTick } = Vue;

		const DELAY = 300;
		const DATE = "@Model.Pagination.Date?.ToString("yyyy/MM/dd")";
		const MAX_DATE = "@Model.Pagination.MaxDate?.ToString("yyyy/MM/dd")";
		const DATE_RANGE = "@string.Join(" - ", Model.Pagination.Date?.ToString("yyyy/MM/dd"), Model.Pagination.MaxDate?.ToString("yyyy/MM/dd")).Trim('-', ' ')";
		
		createApp({
			data() {
				return {
					loading: false,
					date: DATE,
					maxDate: MAX_DATE,
					dateRange: DATE_RANGE,
					selectedCity: null,
					cityId: @Model.Pagination.CityId,
					cities: [],
					errors: []
				}
			},
			watch: {
				selectedCity(newValue) {
					if (newValue && newValue.id)
						this.cityId = newValue.id;
					else
						this.cityId = 0;
				}
			},
			methods: {
				async fetchData() {
					this.errors.length = 0;
					await this.fetchCities();
				},
				async fetchCities(search) {
					this.loading = true;
					search = search && search.trim();

					try {
						const params = new URLSearchParams({
							countryCode: this.countryCode,
							search: search ? encodeURIComponent(search) : ""
						});
						const url = `@Url.Action("List", "Cities", new
									 {
										 area = "Admin"
									 })?${params}`;
						const response = await window.fetch(url);

						if (!response.ok) {
							const error = await getResponseError(response);
							throw error;
						}

						this.cities = await response.json();
						this.selectedCity = this.cities.find(e => e.id === this.cityId);
					} catch (e) {
						this.selectedCity = null;
						alert(e.message || e);
					} finally {
						this.loading = false;
					}
				},
				onReset() {
					this.errors.length = 0;
					this.selectedCity = null;
				}
			},
			mounted() {
				this.fetchData();
			}
		})
		.use(primevue.config.default)
		.component("autocomplete", primevue.autocomplete)
		.component("calendar", primevue.calendar)
		.mount("#searchForm");
	</script>
}