@using HammadBroker.Model.DTO
@using HammadBroker.Model.Entities
@using HammadBroker.Model
@using Microsoft.AspNetCore.Http.Extensions
@model BuildingsPaginated
@{
	ViewData["Title"] = "العقارات";
	bool isSystem = User.IsInRole(Role.System);
}

<div class="card mb-1">
	<h5 class="card-header collapsed" data-bs-toggle="collapse" data-bs-target="#searchForm" aria-expanded="false" aria-controls="searchForm">البحث</h5>
	<div id="searchForm" class="card-body collapse">
		<form method="get" asp-area="Admin" asp-controller="Buildings" asp-action="Index">
			<div class="form-floating mb-1">
				<input class="form-control" name="@nameof(BuildingsPaginated.Pagination.Search)" asp-for="Pagination.Search" placeholder="@Html.DisplayNameFor(e => Model.Pagination.Search)" />
				<label class="form-label" asp-for="Pagination.Search"></label>
			</div>
			<div class="form-floating mb-1">
				<select class="form-select" name="@nameof(BuildingsPaginated.Pagination.BuildingType)" asp-for="Pagination.BuildingType" asp-items="Html.GetEnumSelectList<BuildingType>()" placeholder="@Html.DisplayNameFor(e => Model.Pagination.BuildingType)">
					<option value=""></option>
				</select>
				<label class="form-label" asp-for="Pagination.BuildingType"></label>
			</div>
			<div class="form-floating mb-1">
				<select class="form-select" name="@nameof(BuildingsPaginated.Pagination.FinishingType)" asp-for="Pagination.FinishingType" asp-items="Html.GetEnumSelectList<FinishingType>()" placeholder="@Html.DisplayNameFor(e => Model.Pagination.FinishingType)">
					<option value=""></option>
				</select>
				<label class="form-label" asp-for="Pagination.FinishingType"></label>
			</div>
			<div class="input-group form-floating mb-1">
				<input class="form-control" name="@nameof(BuildingsPaginated.Pagination.Floor)" asp-for="Pagination.Floor" placeholder="@Html.DisplayNameFor(e => Model.Pagination.Floor)" />
				<label class="form-label" asp-for="Pagination.Floor"></label>
				<span class="input-group-text">@Html.DisplayNameFor(e => Model.Pagination.MaxFloor)</span>
				<input class="form-control" name="@nameof(BuildingsPaginated.Pagination.MaxFloor)" asp-for="Pagination.MaxFloor" />
			</div>
			<div class="input-group form-floating mb-1">
				<input class="form-control" name="@nameof(BuildingsPaginated.Pagination.Rooms)" asp-for="Pagination.Rooms" placeholder="@Html.DisplayNameFor(e => Model.Pagination.Rooms)" />
				<label class="form-label" asp-for="Pagination.Rooms"></label>
				<span class="input-group-text">@Html.DisplayNameFor(e => Model.Pagination.MaxRooms)</span>
				<input class="form-control" name="@nameof(BuildingsPaginated.Pagination.MaxRooms)" asp-for="Pagination.MaxRooms" />
			</div>
			<div class="input-group form-floating mb-1">
				<input class="form-control" name="@nameof(BuildingsPaginated.Pagination.Bathrooms)" asp-for="Pagination.Bathrooms" placeholder="@Html.DisplayNameFor(e => Model.Pagination.Bathrooms)" />
				<label class="form-label" asp-for="Pagination.Bathrooms"></label>
				<span class="input-group-text">@Html.DisplayNameFor(e => Model.Pagination.MaxBathrooms)</span>
				<input class="form-control" name="@nameof(BuildingsPaginated.Pagination.MaxBathrooms)" asp-for="Pagination.MaxBathrooms" />
			</div>
			<div class="input-group form-floating mb-1">
				<input class="form-control" name="@nameof(BuildingsPaginated.Pagination.Area)" asp-for="Pagination.Area" placeholder="@Html.DisplayNameFor(e => Model.Pagination.Area)" />
				<label class="form-label" asp-for="Pagination.Area"></label>
				<span class="input-group-text">@Html.DisplayNameFor(e => Model.Pagination.MaxArea)</span>
				<input class="form-control" name="@nameof(BuildingsPaginated.Pagination.MaxArea)" asp-for="Pagination.MaxArea" />
			</div>
			<div class="form-floating mb-1">
				<select class="form-select" name="@nameof(BuildingsPaginated.Pagination.CountryCode)" asp-for="Pagination.CountryCode" asp-items="Model.Pagination.Countries.Select(e => new SelectListItem(e.Name, e.Id, e.Id == Model.Pagination.CountryCode))"
						onchange="populateCities(event.target.value)">
					<option value=""></option>
				</select>
				<label class="form-label" asp-for="Pagination.CountryCode"></label>
			</div>
			<div class="form-floating mb-1">
				<select class="form-select" name="@nameof(BuildingsPaginated.Pagination.CityId)" asp-for="Pagination.CityId" asp-items="Model.Pagination.Cities.Select(e => new SelectListItem(e.Name, e.Id.ToString(), e.Id == Model.Pagination.CityId))">
					<option value=""></option>
				</select>
				<label class="form-label" asp-for="Pagination.CityId"></label>
			</div>
			<div class="mb-1">
				<button type="submit" class="btn btn-outline-primary border-0"><span class="fa fa-magnifying-glass"></span></button>
			</div>
		</form>
	</div>
</div>
<div class="row mb-1">
	<div class="col-12">
		<a asp-area="Admin" asp-controller="Buildings" asp-action="Add" class="btn btn-outline-primary border-0"><i class="fa fa-plus"></i></a>
	</div>
</div>
<form id="deleteBuildingForm" class="d-none" asp-area="Admin" asp-controller="Buildings" asp-action="Delete" method="post">
	<input type="hidden" name="id" value="" />
	<input type="hidden" name="returnUrl" value="@Context.Request.GetEncodedPathAndQuery()" />
</form>
<div class="row table-responsive">
	<table class="table table-borderless table-hover">
		<thead>
		<tr>
			@if (isSystem)
			{
				<th scope="col"></th>
			}
			<th scope="col"></th>
			<th scope="col">@Html.DisplayNameForInnerType((BuildingForList e) => e.Name)</th>
			<th scope="col">@Html.DisplayNameForInnerType((BuildingForList e) => e.BuildingType)</th>
			<th scope="col">@Html.DisplayNameForInnerType((BuildingForList e) => e.FinishingType)</th>
		</tr>
		</thead>
		<tbody>
		@foreach (BuildingForList building in Model.Result)
		{
			<tr>
				@if (isSystem)
				{
					<th scope="row">
						<a class="btn btn-outline-primary border-0 mb-1" asp-area="Admin" asp-action="Edit" asp-route-id="@building.Id"><i class="fa fa-pen"></i></a>
						<a class="btn btn-outline-danger border-0 mb-1" onclick="JavaScript:deleteBuilding(@building.Id, '@building.Name');"><i class="fa fa-xmark"></i></a>
					</th>
				}
				<td>
					<a asp-area="Admin" asp-controller="Buildings" asp-action="Get" asp-route-id="@building.Id" class="text-decoration-none">
						<img-asset src="@building.ImageUrl" readonly imageclass="img-fluid img-list rounded mx-auto d-block"/>
					</a>
				</td>
				<td>
					<a asp-area="Admin" asp-controller="Buildings" asp-action="Get" asp-route-id="@building.Id" class="text-decoration-none">
						@building.Name
					</a>
				</td>
				<td>@building.BuildingType.GetDisplayName()</td>
				<td>@building.FinishingType?.GetDisplayName()</td>
			</tr>
		}
		</tbody>
	</table>
</div>
<partial name="_PaginationPartial" model="Model.Pagination" />

@section scripts
{
	<script type="text/javascript">
		async function populateCities(countryCode) {
			const citiesDropDown = $("#@nameof(Model.Pagination)_@nameof(Model.Pagination.CityId)");
			citiesDropDown.empty();
			if (!countryCode) return;

			try {
				const url = `@Url.Action("List", "Cities", new
				             {
					             area = "Admin"
				             }, Context.Request.Scheme)?countryCode=${encodeURIComponent(countryCode)}`;
				const response = await fetch(url);

				if (!response.ok) {
					const isJson = response.headers.get('content-type')?.includes('application/json');
					const data = isJson && await response.json();
					const error = (data && data.message) || response.status;
					throw error;
				}

				const cities = await response.json();
				citiesDropDown.append("<option value=''></option>");

				for (const city of cities) {
					citiesDropDown.append(`<option value='${city.id}'>${city.name}</option>`);
				}
			} catch (e) {
				alert(e.message || e);
			}
		}

		async function deleteBuilding(id, name) {
			if (!confirm(`هل تريد حذف العقار '${name}'?`)) return;

			const form = $("$deleteBuildingForm");
			form.find("input[name='id']").val(id);
			form.submit();
		}
	</script>
}